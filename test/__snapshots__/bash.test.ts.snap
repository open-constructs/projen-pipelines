// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Bash snapshot 1`] = `
{
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
  "dependencies": {
    "aws-cdk-lib": "^2.102.0",
    "constructs": "^10.0.5",
  },
  "devDependencies": {
    "@stylistic/eslint-plugin": "^2",
    "@types/jest": "*",
    "@types/node": "*",
    "@types/standard-version": "*",
    "@typescript-eslint/eslint-plugin": "^8",
    "@typescript-eslint/parser": "^8",
    "aws-cdk": "^2",
    "cdk-assets": "*",
    "esbuild": "*",
    "eslint": "^9",
    "eslint-import-resolver-typescript": "*",
    "eslint-plugin-import": "*",
    "jest": "*",
    "jest-junit": "^16",
    "projen": "*",
    "standard-version": "*",
    "ts-jest": "*",
    "ts-node": "*",
    "typescript": "*",
  },
  "jest": {
    "clearMocks": true,
    "collectCoverage": true,
    "coverageDirectory": "coverage",
    "coveragePathIgnorePatterns": [
      "/node_modules/",
    ],
    "coverageProvider": "v8",
    "coverageReporters": [
      "json",
      "lcov",
      "clover",
      "cobertura",
      "text",
    ],
    "reporters": [
      "default",
      [
        "jest-junit",
        {
          "outputDirectory": "test-reports",
        },
      ],
    ],
    "testMatch": [
      "<rootDir>/@(src|test)/**/*(*.)@(spec|test).ts?(x)",
      "<rootDir>/@(src|test)/**/__tests__/**/*.ts?(x)",
    ],
    "testPathIgnorePatterns": [
      "/node_modules/",
    ],
    "transform": {
      "^.+\\.[t]sx?$": [
        "ts-jest",
        {
          "tsconfig": "tsconfig.dev.json",
        },
      ],
    },
    "watchPathIgnorePatterns": [
      "/node_modules/",
    ],
  },
  "license": "Apache-2.0",
  "name": "testapp",
  "publishConfig": {
    "access": "public",
  },
  "scripts": {
    "build": "npx projen build",
    "bundle": "npx projen bundle",
    "clobber": "npx projen clobber",
    "compile": "npx projen compile",
    "default": "npx projen default",
    "deploy:dev": "npx projen deploy:dev",
    "deploy:personal": "npx projen deploy:personal",
    "deploy:prod": "npx projen deploy:prod",
    "destroy:personal": "npx projen destroy:personal",
    "diff:dev": "npx projen diff:dev",
    "diff:personal": "npx projen diff:personal",
    "diff:prod": "npx projen diff:prod",
    "eject": "npx projen eject",
    "eslint": "npx projen eslint",
    "fastdiff:dev": "npx projen fastdiff:dev",
    "fastdiff:personal": "npx projen fastdiff:personal",
    "fastdiff:prod": "npx projen fastdiff:prod",
    "package": "npx projen package",
    "post-compile": "npx projen post-compile",
    "post-upgrade": "npx projen post-upgrade",
    "pre-compile": "npx projen pre-compile",
    "projen": "npx projen",
    "publish:assets": "npx projen publish:assets",
    "publish:assets:dev": "npx projen publish:assets:dev",
    "publish:assets:prod": "npx projen publish:assets:prod",
    "synth": "npx projen synth",
    "synth:silent": "npx projen synth:silent",
    "test": "npx projen test",
    "test:watch": "npx projen test:watch",
    "upgrade": "npx projen upgrade",
    "watch:personal": "npx projen watch:personal",
  },
  "version": "0.0.0",
}
`;

exports[`Bash snapshot 2`] = `
"# How to run your pipeline

## Build phase

Synthesize your CDK project:
\`\`\`bash
npx projen install:ci
npx projen build
\`\`\`

Publish all your CDK assets like Lambda function code and container images:
\`\`\`bash
npx projen install:ci
echo "Login to AWS using role undefined for region undefined"
npx projen publish:assets
\`\`\`

If you want to store your cloud assembly and assets for future use or compliance reasons, use:
\`\`\`bash
npx projen install:ci
echo "Login to AWS using role undefined for region undefined"
npx projen publish:assets
\`\`\`

## Deployment phase

For every stage some scripts are generated for diff and deploy

Stage: dev
\`\`\`bash
echo "Login to AWS using role undefined for region eu-central-1"
npx projen diff:dev

echo "Login to AWS using role undefined for region eu-central-1"
npx projen deploy:dev
\`\`\`

Stage: prod
\`\`\`bash
echo "Login to AWS using role undefined for region eu-central-1"
npx projen diff:prod

echo "Login to AWS using role undefined for region eu-central-1"
npx projen deploy:prod
\`\`\`

The stage \`personal\` is meant to be deployed manually by the developer and also has a watch script for live updates.
\`\`\`bash
npx projen diff:personal
npx projen deploy:personal
npx projen destroy:personal
npx projen watch:personal
\`\`\`

The stage \`feature\` is meant to be deployed for feature branches.
\`\`\`bash
npx projen diff:feature
npx projen deploy:feature
npx projen destroy:feature
\`\`\`
"
`;

exports[`Bash snapshot with pkgNamespace 1`] = `
"# How to run your pipeline

## Build phase

Synthesize your CDK project:
\`\`\`bash
npx projen install:ci
npx projen build
\`\`\`

Publish all your CDK assets like Lambda function code and container images:
\`\`\`bash
npx projen install:ci
echo "Login to AWS using role undefined for region undefined"
npx projen publish:assets
\`\`\`

If you want to store your cloud assembly and assets for future use or compliance reasons, use:
\`\`\`bash
npx projen install:ci
echo "Login to AWS using role undefined for region undefined"
npx projen publish:assets
npx projen bump
npx projen release:push-assembly
\`\`\`

## Deployment phase

For every stage some scripts are generated for diff and deploy

Stage: dev
\`\`\`bash
echo "Login to AWS using role undefined for region eu-central-1"
npx projen diff:dev

echo "Login to AWS using role undefined for region eu-central-1"
npx projen deploy:dev
\`\`\`

Stage: prod
\`\`\`bash
echo "Login to AWS using role undefined for region eu-central-1"
npx projen diff:prod

echo "Login to AWS using role undefined for region eu-central-1"
npx projen deploy:prod
\`\`\`

The stage \`personal\` is meant to be deployed manually by the developer and also has a watch script for live updates.
\`\`\`bash
npx projen diff:personal
npx projen deploy:personal
npx projen destroy:personal
npx projen watch:personal
\`\`\`

The stage \`feature\` is meant to be deployed for feature branches.
\`\`\`bash
npx projen diff:feature
npx projen deploy:feature
npx projen destroy:feature
\`\`\`
"
`;

exports[`Bash snapshot with versioning enabled 1`] = `
"# How to run your pipeline

## Build phase

Synthesize your CDK project:
\`\`\`bash
npx projen install:ci
npx projen build
\`\`\`

Publish all your CDK assets like Lambda function code and container images:
\`\`\`bash
npx projen install:ci
echo "Login to AWS using role undefined for region undefined"
npx projen publish:assets
\`\`\`

If you want to store your cloud assembly and assets for future use or compliance reasons, use:
\`\`\`bash
npx projen install:ci
echo "Login to AWS using role undefined for region undefined"
npx projen publish:assets
\`\`\`

## Deployment phase

For every stage some scripts are generated for diff and deploy

Stage: dev
\`\`\`bash
echo "Login to AWS using role undefined for region eu-central-1"
npx projen diff:dev

echo "Login to AWS using role undefined for region eu-central-1"
npx projen deploy:dev
\`\`\`

Stage: prod
\`\`\`bash
echo "Login to AWS using role undefined for region eu-central-1"
npx projen diff:prod

echo "Login to AWS using role undefined for region eu-central-1"
npx projen deploy:prod
\`\`\`

The stage \`personal\` is meant to be deployed manually by the developer and also has a watch script for live updates.
\`\`\`bash
npx projen diff:personal
npx projen deploy:personal
npx projen destroy:personal
npx projen watch:personal
\`\`\`

The stage \`feature\` is meant to be deployed for feature branches.
\`\`\`bash
npx projen diff:feature
npx projen deploy:feature
npx projen destroy:feature
\`\`\`
"
`;

exports[`Bash snapshot with versioning enabled 2`] = `
"// ~~ Generated by projen
/* eslint-disable */
import { App, AppProps, Stack, StackProps } from 'aws-cdk-lib';
import { CfnOutput } from 'aws-cdk-lib';
import { StringParameter } from 'aws-cdk-lib/aws-ssm';
import * as fs from 'fs';

const versioningConfig = {
  "enabled": true,
  "outputs": {
    "cloudFormation": {
      "enabled": true
    },
    "parameterStore": {
      "enabled": true,
      "parameterName": "/{stackName}/version"
    }
  },
  "strategy": {
    "format": "{commit-count}",
    "components": {
      "commitCount": {
        "countFrom": "all"
      }
    }
  }
};


/**
 * Load version information from generated file
 */
function loadVersionInfo(): any {
  try {
    return JSON.parse(fs.readFileSync('~version.json', 'utf8'));
  } catch (error) {
    console.warn('Could not load version info, using fallback');
    return {
      version: '0.0.0',
      commitHash: 'unknown',
      commitHashShort: 'unknown',
      branch: 'unknown',
      commitCount: 0,
      packageVersion: '0.0.0',
      deployedAt: new Date().toISOString(),
      deployedBy: 'unknown',
      environment: 'unknown'
    };
  }
}

/**
 * Get versioning configuration for a specific stage
 */
function getStageConfig(stageName: string, baseConfig: any, stageOverrides?: any): any {
  if (!stageOverrides || !stageOverrides[stageName]) {
    return baseConfig;
  }
  
  // Merge stage override with base config
  const override = stageOverrides[stageName];
  return {
    ...baseConfig,
    outputs: {
      cloudFormation: override.outputs?.cloudFormation || baseConfig.outputs.cloudFormation,
      parameterStore: override.outputs?.parameterStore || baseConfig.outputs.parameterStore,
    }
  };
}

/**
 * Add versioning outputs to a stack
 */
function addVersioningToStack(stack: Stack, stageName: string, stageOverrides?: any): void {
  const versionInfo = loadVersionInfo();
  const baseConfig = {"enabled":true,"outputs":{"cloudFormation":{"enabled":true},"parameterStore":{"enabled":true,"parameterName":"/{stackName}/version"}},"strategy":{"format":"{commit-count}","components":{"commitCount":{"countFrom":"all"}}}};
  const config = getStageConfig(stageName, baseConfig, stageOverrides);
  
  // Check if format is specified in CloudFormation or ParameterStore configs
  const cfFormat = config.outputs.cloudFormation?.format || 'structured';
  const ssmFormat = config.outputs.parameterStore?.format || 'structured';
  
  // Add CloudFormation outputs
  if (config.outputs.cloudFormation?.enabled) {
    if (cfFormat === 'plain') {
      // Plain format - single output with version string
      new CfnOutput(stack, 'AppVersion', {
        value: versionInfo.version,
        description: 'Application version',
        exportName: config.outputs.cloudFormation.exportName,
      });
    } else {
      // Structured format - multiple outputs
      new CfnOutput(stack, 'AppVersion', {
        value: versionInfo.version,
        description: 'Application version',
        exportName: config.outputs.cloudFormation.exportName,
      });
      
      new CfnOutput(stack, 'AppVersionCommitHash', {
        value: versionInfo.commitHash,
        description: 'Git commit hash',
        exportName: config.outputs.cloudFormation.exportName ? \`\${config.outputs.cloudFormation.exportName}CommitHash\` : undefined,
      });
      
      new CfnOutput(stack, 'AppVersionBranch', {
        value: versionInfo.branch,
        description: 'Git branch',
        exportName: config.outputs.cloudFormation.exportName ? \`\${config.outputs.cloudFormation.exportName}Branch\` : undefined,
      });

      new CfnOutput(stack, 'AppVersionInfo', {
        value: JSON.stringify(versionInfo),
        description: 'Complete version information',
        exportName: config.outputs.cloudFormation.exportName ? \`\${config.outputs.cloudFormation.exportName}Info\` : undefined,
      });
    }
  }
  
  // Add SSM Parameter Store parameters
  if (config.outputs.parameterStore?.enabled) {
    if (config.outputs.parameterStore.hierarchical) {
      // Hierarchical parameters
      const baseParameterName = (config.outputs.parameterStore.parameterName || '/{stackName}/version')
        .replace('{stackName}', stack.stackName)
        .replace('{stageName}', stageName);
        
      // Create hierarchical parameters
      new StringParameter(stack, 'VersionParameterVersion', {
        parameterName: \`\${baseParameterName}/version\`,
        stringValue: versionInfo.version,
        description: 'Application version',
      });
      
      new StringParameter(stack, 'VersionParameterCommitHash', {
        parameterName: \`\${baseParameterName}/commitHash\`,
        stringValue: versionInfo.commitHash,
        description: 'Git commit hash',
      });
      
      new StringParameter(stack, 'VersionParameterBranch', {
        parameterName: \`\${baseParameterName}/branch\`,
        stringValue: versionInfo.branch,
        description: 'Git branch',
      });
      
      new StringParameter(stack, 'VersionParameterInfo', {
        parameterName: \`\${baseParameterName}/info\`,
        stringValue: JSON.stringify(versionInfo),
        description: 'Complete version information',
      });
    } else {
      // Single parameter
      const parameterName = (config.outputs.parameterStore.parameterName || '/{stackName}/version')
        .replace('{stackName}', stack.stackName)
        .replace('{stageName}', stageName);
        
      new StringParameter(stack, 'VersionParameter', {
        parameterName,
        stringValue: ssmFormat === 'plain' ? versionInfo.version : JSON.stringify(versionInfo),
        description: ssmFormat === 'plain' ? 'Application version' : 'Complete version information',
      });
    }
  }
}

/**
 * PipelineAppProps is an extension of AppProps, which is part of the AWS CDK core.
 * It includes optional functions to provide AWS Stacks for different stages.
 *
 * Use these functions to instantiate your application stacks with the parameters for
 * each stage
 */
export interface PipelineAppProps extends AppProps {
  /** This function will be used to generate a dev stack. */
  provideDevStack: (app: App, stackId: string, props: PipelineAppStackProps) => Stack;
  /** This function will be used to generate a prod stack. */
  provideProdStack: (app: App, stackId: string, props: PipelineAppStackProps) => Stack;

}

/**
 * PipelineAppStackProps is an extension of StackProps, which is part of the AWS CDK core.
 * It includes an additional property to specify the stage name.
 */
export interface PipelineAppStackProps extends StackProps {
  stageName: string;
}

/**
 * The PipelineApp class extends the App class from AWS CDK and overrides the constructor to support
 * different stages of the application (development, production, personal, feature) by invoking the provided
 * stack-providing functions from the props.
 */
export class PipelineApp extends App {
  constructor(props: PipelineAppProps) {
    super(props);

    // If a function is provided for creating a dev stack, it is called with necessary arguments.
    if (props.provideDevStack) {
      props.provideDevStack(this, 'testapp-dev', { env: { account: '123456789012', region: 'eu-central-1' }, stackName: 'testapp-dev', stageName: 'dev' });
    }
    // If a function is provided for creating a prod stack, it is called with necessary arguments.
    if (props.provideProdStack) {
      props.provideProdStack(this, 'testapp-prod', { env: { account: '123456789012', region: 'eu-central-1' }, stackName: 'testapp-prod', stageName: 'prod' });
    }

    // Apply versioning to all stacks
    this.node.children.forEach((child) => {
      if (child instanceof Stack) {
        const stageName = child.stackName.split('-').pop() || 'default';
        addVersioningToStack(child, stageName, undefined);
      }
    });

  }
}
"
`;

exports[`Bash snapshot with versioning enabled 3`] = `
{
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
  "dependencies": {
    "aws-cdk-lib": "^2.132.0",
    "constructs": "^10.0.5",
  },
  "devDependencies": {
    "@stylistic/eslint-plugin": "^2",
    "@types/jest": "*",
    "@types/node": "*",
    "@types/standard-version": "*",
    "@typescript-eslint/eslint-plugin": "^8",
    "@typescript-eslint/parser": "^8",
    "aws-cdk": "^2",
    "cdk-assets": "*",
    "esbuild": "*",
    "eslint": "^9",
    "eslint-import-resolver-typescript": "*",
    "eslint-plugin-import": "*",
    "jest": "*",
    "jest-junit": "^16",
    "projen": "*",
    "standard-version": "*",
    "ts-jest": "*",
    "ts-node": "*",
    "typescript": "*",
  },
  "jest": {
    "clearMocks": true,
    "collectCoverage": true,
    "coverageDirectory": "coverage",
    "coveragePathIgnorePatterns": [
      "/node_modules/",
    ],
    "coverageProvider": "v8",
    "coverageReporters": [
      "json",
      "lcov",
      "clover",
      "cobertura",
      "text",
    ],
    "reporters": [
      "default",
      [
        "jest-junit",
        {
          "outputDirectory": "test-reports",
        },
      ],
    ],
    "testMatch": [
      "<rootDir>/@(src|test)/**/*(*.)@(spec|test).ts?(x)",
      "<rootDir>/@(src|test)/**/__tests__/**/*.ts?(x)",
    ],
    "testPathIgnorePatterns": [
      "/node_modules/",
    ],
    "transform": {
      "^.+\\.[t]sx?$": [
        "ts-jest",
        {
          "tsconfig": "tsconfig.dev.json",
        },
      ],
    },
    "watchPathIgnorePatterns": [
      "/node_modules/",
    ],
  },
  "license": "Apache-2.0",
  "name": "testapp",
  "publishConfig": {
    "access": "public",
  },
  "scripts": {
    "build": "npx projen build",
    "bundle": "npx projen bundle",
    "clobber": "npx projen clobber",
    "compile": "npx projen compile",
    "default": "npx projen default",
    "deploy:dev": "npx projen deploy:dev",
    "deploy:prod": "npx projen deploy:prod",
    "diff:dev": "npx projen diff:dev",
    "diff:prod": "npx projen diff:prod",
    "eject": "npx projen eject",
    "eslint": "npx projen eslint",
    "fastdiff:dev": "npx projen fastdiff:dev",
    "fastdiff:prod": "npx projen fastdiff:prod",
    "package": "npx projen package",
    "post-compile": "npx projen post-compile",
    "post-upgrade": "npx projen post-upgrade",
    "pre-compile": "npx projen pre-compile",
    "projen": "npx projen",
    "publish:assets": "npx projen publish:assets",
    "publish:assets:dev": "npx projen publish:assets:dev",
    "publish:assets:prod": "npx projen publish:assets:prod",
    "synth": "npx projen synth",
    "synth:silent": "npx projen synth:silent",
    "test": "npx projen test",
    "test:watch": "npx projen test:watch",
    "upgrade": "npx projen upgrade",
    "version:compute": "npx projen version:compute",
    "version:fetch:dev": "npx projen version:fetch:dev",
    "version:fetch:prod": "npx projen version:fetch:prod",
    "version:print": "npx projen version:print",
  },
  "version": "0.0.0",
}
`;

exports[`Bash snapshot with versioning enabled 4`] = `
{
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
  "env": {
    "PATH": "$(npx -c "node --print process.env.PATH")",
  },
  "tasks": {
    "build": {
      "description": "Full release build",
      "name": "build",
      "steps": [
        {
          "spawn": "default",
        },
        {
          "spawn": "pre-compile",
        },
        {
          "spawn": "compile",
        },
        {
          "spawn": "post-compile",
        },
        {
          "spawn": "test",
        },
        {
          "spawn": "package",
        },
      ],
    },
    "bundle": {
      "description": "Prepare assets",
      "name": "bundle",
    },
    "clobber": {
      "condition": "git diff --exit-code > /dev/null",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)",
      },
      "name": "clobber",
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in "scratch" branch",
        },
        {
          "exec": "git checkout $BRANCH",
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin",
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit",
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files",
        },
        {
          "say": "ready to rock! (unpushed commits are under the "scratch" branch)",
        },
      ],
    },
    "compile": {
      "description": "Only compile",
      "name": "compile",
      "steps": [
        {
          "spawn": "version:compute",
        },
        {
          "spawn": "version:print",
        },
      ],
    },
    "default": {
      "description": "Synthesize project files",
      "name": "default",
      "steps": [
        {
          "exec": "node .projenrc.js",
        },
      ],
    },
    "deploy:dev": {
      "name": "deploy:dev",
      "steps": [
        {
          "exec": "cdk --app cdk.out --outputs-file cdk-outputs-dev.json --progress events --require-approval never deploy testapp-dev",
        },
      ],
    },
    "deploy:prod": {
      "name": "deploy:prod",
      "steps": [
        {
          "exec": "cdk --app cdk.out --outputs-file cdk-outputs-prod.json --progress events --require-approval never deploy testapp-prod",
        },
      ],
    },
    "diff:dev": {
      "name": "diff:dev",
      "steps": [
        {
          "exec": "cdk --app cdk.out diff testapp-dev",
        },
      ],
    },
    "diff:prod": {
      "name": "diff:prod",
      "steps": [
        {
          "exec": "cdk --app cdk.out diff testapp-prod",
        },
      ],
    },
    "eject": {
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true",
      },
      "name": "eject",
      "steps": [
        {
          "spawn": "default",
        },
      ],
    },
    "eslint": {
      "description": "Runs eslint against the codebase",
      "env": {
        "ESLINT_USE_FLAT_CONFIG": "false",
      },
      "name": "eslint",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern $@ src test build-tools .projenrc.js",
          "receiveArgs": true,
        },
      ],
    },
    "fastdiff:dev": {
      "name": "fastdiff:dev",
      "steps": [
        {
          "exec": "cdk --app cdk.out diff --no-changeset testapp-dev",
        },
      ],
    },
    "fastdiff:prod": {
      "name": "fastdiff:prod",
      "steps": [
        {
          "exec": "cdk --app cdk.out diff --no-changeset testapp-prod",
        },
      ],
    },
    "install": {
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "name": "install",
      "steps": [
        {
          "exec": "yarn install --check-files",
        },
      ],
    },
    "install:ci": {
      "description": "Install project dependencies using frozen lockfile",
      "name": "install:ci",
      "steps": [
        {
          "exec": "yarn install --check-files --frozen-lockfile",
        },
      ],
    },
    "package": {
      "description": "Creates the distribution package",
      "name": "package",
    },
    "post-compile": {
      "description": "Runs after successful compilation",
      "name": "post-compile",
      "steps": [
        {
          "spawn": "synth:silent",
        },
      ],
    },
    "post-upgrade": {
      "description": "Runs after upgrading dependencies",
      "name": "post-upgrade",
    },
    "pre-compile": {
      "description": "Prepare the project for compilation",
      "name": "pre-compile",
    },
    "publish:assets": {
      "name": "publish:assets",
      "steps": [
        {
          "spawn": "publish:assets:dev",
        },
        {
          "spawn": "publish:assets:prod",
        },
      ],
    },
    "publish:assets:dev": {
      "name": "publish:assets:dev",
      "steps": [
        {
          "exec": "npx cdk-assets -p cdk.out/testapp-dev.assets.json publish",
        },
      ],
    },
    "publish:assets:prod": {
      "name": "publish:assets:prod",
      "steps": [
        {
          "exec": "npx cdk-assets -p cdk.out/testapp-prod.assets.json publish",
        },
      ],
    },
    "synth": {
      "description": "Synthesizes your cdk app into cdk.out",
      "name": "synth",
      "steps": [
        {
          "exec": "rm -rf cdk.out",
        },
        {
          "exec": "cdk synth",
        },
      ],
    },
    "synth:silent": {
      "description": "Synthesizes your cdk app into cdk.out and suppresses the template in stdout (part of "yarn build")",
      "name": "synth:silent",
      "steps": [
        {
          "exec": "rm -rf cdk.out",
        },
        {
          "exec": "cdk synth -q",
        },
      ],
    },
    "test": {
      "description": "Run tests",
      "name": "test",
      "steps": [
        {
          "exec": "jest --passWithNoTests --updateSnapshot",
          "receiveArgs": true,
        },
        {
          "spawn": "eslint",
        },
      ],
    },
    "test:watch": {
      "description": "Run jest in watch mode",
      "name": "test:watch",
      "steps": [
        {
          "exec": "jest --watch",
        },
      ],
    },
    "upgrade": {
      "description": "upgrade dependencies",
      "env": {
        "CI": "0",
      },
      "name": "upgrade",
      "steps": [
        {
          "exec": "npx npm-check-updates@16 --upgrade --target=minor --peer --no-deprecated --dep=dev,peer,prod,optional --filter=@types/jest,@types/node,@types/standard-version,cdk-assets,esbuild,eslint-import-resolver-typescript,eslint-plugin-import,jest,projen,standard-version,ts-jest,ts-node,typescript",
        },
        {
          "exec": "yarn install --check-files",
        },
        {
          "exec": "yarn upgrade @stylistic/eslint-plugin @types/jest @types/node @types/standard-version @typescript-eslint/eslint-plugin @typescript-eslint/parser aws-cdk cdk-assets esbuild eslint-import-resolver-typescript eslint-plugin-import eslint jest jest-junit projen standard-version ts-jest ts-node typescript aws-cdk-lib constructs",
        },
        {
          "exec": "npx projen",
        },
        {
          "spawn": "post-upgrade",
        },
      ],
    },
    "version:compute": {
      "description": "Compute version information from git",
      "name": "version:compute",
      "steps": [
        {
          "exec": "echo "Computing version information..."",
        },
        {
          "exec": "node -e "
const fs = require('fs');
const cp = require('child_process');

// Import versioning modules
const { VersionComputer, VersioningStrategy } = require('projen-pipelines');

try {
  // Gather git information
  const commitHash = cp.execSync('git rev-parse HEAD', {encoding: 'utf8'}).trim();
  const commitHashShort = commitHash.substring(0, 8);
  const commitCount = parseInt(cp.execSync('git rev-list --count HEAD', {encoding: 'utf8'}).trim());
  const branch = cp.execSync('git rev-parse --abbrev-ref HEAD', {encoding: 'utf8'}).trim();
  
  let tag = '';
  let commitsSinceTag = 0;
  try { 
    tag = cp.execSync('git describe --tags --exact-match --all', {encoding: 'utf8'}).trim();
  } catch {
    try {
      const describeOutput = cp.execSync('git describe --tags --long --all', {encoding: 'utf8'}).trim();
      const match = describeOutput.match(/^(.+)-(\\\\d+)-g[0-9a-f]+$/);
      if (match) {
        tag = match[1];
        commitsSinceTag = parseInt(match[2]);
      }
    } catch {}
  }
  
  let packageVersion = '0.0.0';
  try {
    packageVersion = JSON.parse(fs.readFileSync('package.json', 'utf8')).version;
  } catch {}
  
  // Create computation context
  const context = {
    gitInfo: {
      commitHash,
      commitHashShort,
      branch,
      tag,
      commitsSinceTag,
      commitCount,
      packageVersion
    },
    environment: process.env.STAGE || process.env.ENVIRONMENT || 'unknown',
    deployedBy: process.env.GITHUB_ACTOR || process.env.GITLAB_USER_LOGIN || process.env.USER || 'unknown',
    buildNumber: process.env.BUILD_NUMBER || process.env.GITHUB_RUN_NUMBER,
    repository: process.env.GITHUB_REPOSITORY || process.env.CI_PROJECT_PATH,
    pipelineVersion: process.env.PIPELINE_VERSION
  };
  
  // Create strategy from configuration
  const strategyConfig = {\\"format\\":\\"{commit-count}\\",\\"components\\":{\\"commitCount\\":{\\"countFrom\\":\\"all\\"}}};
  const strategy = new VersioningStrategy(strategyConfig.format, strategyConfig.components);
  
  // Compute version
  const computer = new VersionComputer(strategy);
  computer.computeVersionInfo(context).then(versionInfo => {
    fs.writeFileSync('~version.json', versionInfo.toJson());
    console.log('Version computed:', versionInfo.version, '(commit:', versionInfo.commitHashShort + ')');
  }).catch(error => {
    console.error('Error computing version:', error.message);
    const fallback = {
      version: '0.0.0',
      commitHash: 'unknown',
      commitHashShort: 'unknown',
      branch: 'unknown',
      commitCount: 0,
      packageVersion: '0.0.0',
      deployedAt: new Date().toISOString(),
      deployedBy: 'unknown',
      environment: 'unknown'
    };
    fs.writeFileSync('~version.json', JSON.stringify(fallback, null, 2));
  });
} catch (e) {
  console.error('Error in version computation:', e.message);
  const fallback = {
    version: '0.0.0',
    commitHash: 'unknown',
    commitHashShort: 'unknown',
    branch: 'unknown',
    commitCount: 0,
    packageVersion: '0.0.0',
    deployedAt: new Date().toISOString(),
    deployedBy: 'unknown',
    environment: 'unknown'
  };
  fs.writeFileSync('~version.json', JSON.stringify(fallback, null, 2));
}"",
        },
      ],
    },
    "version:fetch:dev": {
      "description": "Fetch version data from deployed dev stack",
      "name": "version:fetch:dev",
      "steps": [
        {
          "exec": "echo "Fetching version data from CloudFormation outputs for dev..." && aws cloudformation describe-stacks --stack-name testapp-dev --region eu-central-1 --query "Stacks[0].Outputs[?starts_with(OutputKey, 'AppVersion')].{Key:OutputKey,Value:OutputValue}" --output table && echo "Fetching version data from SSM Parameter Store for dev..." && aws ssm get-parameter --name "/testapp-dev/version" --region eu-central-1 --query "Parameter.{Name:Name,Value:Value}" --output table",
        },
      ],
    },
    "version:fetch:prod": {
      "description": "Fetch version data from deployed prod stack",
      "name": "version:fetch:prod",
      "steps": [
        {
          "exec": "echo "Fetching version data from CloudFormation outputs for prod..." && aws cloudformation describe-stacks --stack-name testapp-prod --region eu-central-1 --query "Stacks[0].Outputs[?starts_with(OutputKey, 'AppVersion')].{Key:OutputKey,Value:OutputValue}" --output table && echo "Fetching version data from SSM Parameter Store for prod..." && aws ssm get-parameter --name "/testapp-prod/version" --region eu-central-1 --query "Parameter.{Name:Name,Value:Value}" --output table",
        },
      ],
    },
    "version:print": {
      "description": "Print version information",
      "name": "version:print",
      "steps": [
        {
          "exec": "cat ~version.json",
        },
      ],
    },
  },
}
`;
