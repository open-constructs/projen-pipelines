// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Gitlab snapshot 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

stages:
  - synth
  - publish_assets
  - dev
  - prod
.artifacts_cdk:
  artifacts:
    when: on_success
    expire_in: 30 days
    name: CDK Assembly - $CI_JOB_NAME-$CI_COMMIT_REF_SLUG
    untracked: false
    paths:
      - cdk.out
.artifacts_cdkdeploy:
  artifacts:
    when: on_success
    expire_in: 30 days
    name: CDK Outputs - $CI_JOB_NAME-$CI_COMMIT_REF_SLUG
    untracked: false
    paths:
      - cdk-outputs-*.json
.aws_base:
  image:
    name: "image: jsii/superchain:1-buster-slim-node18"
  id_tokens:
    AWS_TOKEN:
      aud: https://sts.amazonaws.com
  variables:
    CI: "true"
  before_script:
    - |
      check_variables_defined() {
        for var in "$@"; do
          if [ -z "$(eval "echo \\$$var")" ]; then
            log_fatal "\${var} not defined";
          fi
        done
      }

      awslogin() {
        roleArn=\${1: -\${AWS_ROLE_ARN}}
        sessionName=\${2:-GitLabRunner-\${CI_PROJECT_ID}-\${CI_PIPELINE_ID}}
        check_variables_defined roleArn AWS_TOKEN
        export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" $(aws sts assume-role-with-web-identity --role-arn \${roleArn} --role-session-name "\${sessionName}" --web-identity-token \${AWS_TOKEN} --duration-seconds 3600 --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' --output text))
        # TODO CODE ARTIFACT
      }
synth:
  extends:
    - .aws_base
    - .artifacts_cdk
  needs: []
  stage: synth
  script:
    - "awslogin synthRole "
    - npx projen install:ci
    - npx projen build
  variables: {}
publish_assets:
  extends:
    - .aws_base
  stage: publish_assets
  needs:
    - job: synth
      artifacts: true
  script:
    - "awslogin publishRole "
    - npx projen install:ci
    - npx projen publish:assets
  variables: {}
diff-dev:
  extends:
    - .aws_base
  stage: dev
  only:
    refs:
      - main
  needs:
    - job: synth
      artifacts: true
    - job: publish_assets
  script:
    - "awslogin devRole "
    - npx projen install:ci
    - npx projen diff:dev
  variables: {}
deploy-dev:
  extends:
    - .aws_base
    - .artifacts_cdkdeploy
  stage: dev
  only:
    refs:
      - main
  needs:
    - job: synth
      artifacts: true
    - job: publish_assets
    - job: diff-dev
  script:
    - "awslogin devRole "
    - npx projen install:ci
    - npx projen deploy:dev
  variables: {}
diff-prod:
  extends:
    - .aws_base
  stage: prod
  only:
    refs:
      - main
  needs:
    - job: synth
      artifacts: true
    - job: publish_assets
  script:
    - "awslogin prodRole "
    - npx projen install:ci
    - npx projen diff:prod
  variables: {}
deploy-prod:
  extends:
    - .aws_base
    - .artifacts_cdkdeploy
  stage: prod
  when: manual
  only:
    refs:
      - main
  needs:
    - job: synth
      artifacts: true
    - job: publish_assets
    - job: diff-prod
  script:
    - "awslogin prodRole "
    - npx projen install:ci
    - npx projen deploy:prod
  variables: {}
"
`;

exports[`Gitlab snapshot 2`] = `
{
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
  "dependencies": {
    "aws-cdk-lib": "^2.102.0",
    "constructs": "^10.0.5",
  },
  "devDependencies": {
    "@types/jest": "*",
    "@types/node": "^18",
    "@types/standard-version": "*",
    "@typescript-eslint/eslint-plugin": "^6",
    "@typescript-eslint/parser": "^6",
    "aws-cdk": "^2.102.0",
    "cdk-assets": "*",
    "esbuild": "*",
    "eslint": "^8",
    "eslint-import-resolver-typescript": "*",
    "eslint-plugin-import": "*",
    "jest": "*",
    "jest-junit": "^15",
    "projen": "*",
    "standard-version": "*",
    "ts-jest": "*",
    "ts-node": "*",
    "typescript": "*",
  },
  "jest": {
    "clearMocks": true,
    "collectCoverage": true,
    "coverageDirectory": "coverage",
    "coveragePathIgnorePatterns": [
      "/node_modules/",
    ],
    "coverageReporters": [
      "json",
      "lcov",
      "clover",
      "cobertura",
      "text",
    ],
    "reporters": [
      "default",
      [
        "jest-junit",
        {
          "outputDirectory": "test-reports",
        },
      ],
    ],
    "testMatch": [
      "<rootDir>/src/**/__tests__/**/*.ts?(x)",
      "<rootDir>/(test|src)/**/*(*.)@(spec|test).ts?(x)",
    ],
    "testPathIgnorePatterns": [
      "/node_modules/",
    ],
    "transform": {
      "^.+\\.[t]sx?$": [
        "ts-jest",
        {
          "tsconfig": "tsconfig.dev.json",
        },
      ],
    },
    "watchPathIgnorePatterns": [
      "/node_modules/",
    ],
  },
  "license": "Apache-2.0",
  "name": "testapp",
  "scripts": {
    "build": "npx projen build",
    "bump": "npx projen bump",
    "bundle": "npx projen bundle",
    "clobber": "npx projen clobber",
    "compile": "npx projen compile",
    "default": "npx projen default",
    "deploy:dev": "npx projen deploy:dev",
    "deploy:prod": "npx projen deploy:prod",
    "diff:dev": "npx projen diff:dev",
    "diff:prod": "npx projen diff:prod",
    "eject": "npx projen eject",
    "eslint": "npx projen eslint",
    "package": "npx projen package",
    "post-compile": "npx projen post-compile",
    "post-upgrade": "npx projen post-upgrade",
    "pre-compile": "npx projen pre-compile",
    "projen": "npx projen",
    "publish:assets": "npx projen publish:assets",
    "publish:assets:dev": "npx projen publish:assets:dev",
    "publish:assets:prod": "npx projen publish:assets:prod",
    "release:push-assembly": "npx projen release:push-assembly",
    "synth": "npx projen synth",
    "synth:silent": "npx projen synth:silent",
    "test": "npx projen test",
    "test:watch": "npx projen test:watch",
    "upgrade": "npx projen upgrade",
  },
  "version": "0.0.0",
}
`;

exports[`Gitlab snapshot with independent stage 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

stages:
  - synth
  - publish_assets
  - independent
.artifacts_cdk:
  artifacts:
    when: on_success
    expire_in: 30 days
    name: CDK Assembly - $CI_JOB_NAME-$CI_COMMIT_REF_SLUG
    untracked: false
    paths:
      - cdk.out
.artifacts_cdkdeploy:
  artifacts:
    when: on_success
    expire_in: 30 days
    name: CDK Outputs - $CI_JOB_NAME-$CI_COMMIT_REF_SLUG
    untracked: false
    paths:
      - cdk-outputs-*.json
.aws_base:
  image:
    name: "image: jsii/superchain:1-buster-slim-node18"
  id_tokens:
    AWS_TOKEN:
      aud: https://sts.amazonaws.com
  variables:
    CI: "true"
  before_script:
    - |
      check_variables_defined() {
        for var in "$@"; do
          if [ -z "$(eval "echo \\$$var")" ]; then
            log_fatal "\${var} not defined";
          fi
        done
      }

      awslogin() {
        roleArn=\${1: -\${AWS_ROLE_ARN}}
        sessionName=\${2:-GitLabRunner-\${CI_PROJECT_ID}-\${CI_PIPELINE_ID}}
        check_variables_defined roleArn AWS_TOKEN
        export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" $(aws sts assume-role-with-web-identity --role-arn \${roleArn} --role-session-name "\${sessionName}" --web-identity-token \${AWS_TOKEN} --duration-seconds 3600 --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' --output text))
        # TODO CODE ARTIFACT
      }
synth:
  extends:
    - .aws_base
    - .artifacts_cdk
  needs: []
  stage: synth
  script:
    - "awslogin synthRole "
    - npx projen install:ci
    - npx projen build
  variables: {}
publish_assets:
  extends:
    - .aws_base
  stage: publish_assets
  needs:
    - job: synth
      artifacts: true
  script:
    - "awslogin publishRole "
    - npx projen install:ci
    - npx projen publish:assets
  variables: {}
deploy-independent:
  extends:
    - .aws_base
    - .artifacts_cdkdeploy
  stage: independent
  when: manual
  needs: []
  script:
    - "awslogin deployRole "
    - npx projen install:ci
    - npx projen build
    - npx projen diff:independent
    - npx projen deploy:independent
    - echo Post Deploy
  variables:
    AWS_REGION: eu-central-1
    FOO: bar
"
`;

exports[`Gitlab snapshot with preInstallStep 1`] = `undefined`;

exports[`Gitlab snapshot with preInstallStep 2`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

stages:
  - synth
  - publish_assets
  - prod
.artifacts_cdk:
  artifacts:
    when: on_success
    expire_in: 30 days
    name: CDK Assembly - $CI_JOB_NAME-$CI_COMMIT_REF_SLUG
    untracked: false
    paths:
      - cdk.out
.artifacts_cdkdeploy:
  artifacts:
    when: on_success
    expire_in: 30 days
    name: CDK Outputs - $CI_JOB_NAME-$CI_COMMIT_REF_SLUG
    untracked: false
    paths:
      - cdk-outputs-*.json
.aws_base:
  image:
    name: "image: jsii/superchain:1-buster-slim-node18"
  id_tokens:
    AWS_TOKEN:
      aud: https://sts.amazonaws.com
  variables:
    CI: "true"
  before_script:
    - |
      check_variables_defined() {
        for var in "$@"; do
          if [ -z "$(eval "echo \\$$var")" ]; then
            log_fatal "\${var} not defined";
          fi
        done
      }

      awslogin() {
        roleArn=\${1: -\${AWS_ROLE_ARN}}
        sessionName=\${2:-GitLabRunner-\${CI_PROJECT_ID}-\${CI_PIPELINE_ID}}
        check_variables_defined roleArn AWS_TOKEN
        export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" $(aws sts assume-role-with-web-identity --role-arn \${roleArn} --role-session-name "\${sessionName}" --web-identity-token \${AWS_TOKEN} --duration-seconds 3600 --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' --output text))
        # TODO CODE ARTIFACT
      }
synth:
  extends:
    - .aws_base
    - .artifacts_cdk
  needs: []
  stage: synth
  script:
    - "awslogin synthRole "
    - echo Login
    - npx projen install:ci
    - npx projen build
  variables:
    FOO: bar
publish_assets:
  extends:
    - .aws_base
  stage: publish_assets
  needs:
    - job: synth
      artifacts: true
  script:
    - "awslogin publishRole "
    - echo Login
    - npx projen install:ci
    - npx projen publish:assets
  variables:
    FOO: bar
diff-prod:
  extends:
    - .aws_base
  stage: prod
  only:
    refs:
      - main
  needs:
    - job: synth
      artifacts: true
    - job: publish_assets
  script:
    - "awslogin defaultRole "
    - echo Login
    - npx projen install:ci
    - npx projen diff:prod
  variables:
    FOO: bar
deploy-prod:
  extends:
    - .aws_base
    - .artifacts_cdkdeploy
  stage: prod
  only:
    refs:
      - main
  needs:
    - job: synth
      artifacts: true
    - job: publish_assets
    - job: diff-prod
  script:
    - "awslogin defaultRole "
    - echo Login
    - npx projen install:ci
    - npx projen deploy:prod
  variables:
    FOO: bar
"
`;

exports[`Gitlab snapshot with runner default tags 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

stages:
  - synth
  - publish_assets
  - dev
  - prod
.artifacts_cdk:
  artifacts:
    when: on_success
    expire_in: 30 days
    name: CDK Assembly - $CI_JOB_NAME-$CI_COMMIT_REF_SLUG
    untracked: false
    paths:
      - cdk.out
.artifacts_cdkdeploy:
  artifacts:
    when: on_success
    expire_in: 30 days
    name: CDK Outputs - $CI_JOB_NAME-$CI_COMMIT_REF_SLUG
    untracked: false
    paths:
      - cdk-outputs-*.json
.aws_base:
  image:
    name: "image: jsii/superchain:1-buster-slim-node18"
  id_tokens:
    AWS_TOKEN:
      aud: https://sts.amazonaws.com
  variables:
    CI: "true"
  before_script:
    - |
      check_variables_defined() {
        for var in "$@"; do
          if [ -z "$(eval "echo \\$$var")" ]; then
            log_fatal "\${var} not defined";
          fi
        done
      }

      awslogin() {
        roleArn=\${1: -\${AWS_ROLE_ARN}}
        sessionName=\${2:-GitLabRunner-\${CI_PROJECT_ID}-\${CI_PIPELINE_ID}}
        check_variables_defined roleArn AWS_TOKEN
        export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" $(aws sts assume-role-with-web-identity --role-arn \${roleArn} --role-session-name "\${sessionName}" --web-identity-token \${AWS_TOKEN} --duration-seconds 3600 --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' --output text))
        # TODO CODE ARTIFACT
      }
synth:
  extends:
    - .aws_base
    - .artifacts_cdk
  needs: []
  stage: synth
  tags:
    - defaultTag
  script:
    - "awslogin synthRole "
    - npx projen install:ci
    - npx projen build
  variables: {}
publish_assets:
  extends:
    - .aws_base
  stage: publish_assets
  tags:
    - defaultTag
  needs:
    - job: synth
      artifacts: true
  script:
    - "awslogin publishRole "
    - npx projen install:ci
    - npx projen publish:assets
  variables: {}
diff-dev:
  extends:
    - .aws_base
  stage: dev
  tags:
    - defaultTag
  only:
    refs:
      - main
  needs:
    - job: synth
      artifacts: true
    - job: publish_assets
  script:
    - "awslogin devRole "
    - npx projen install:ci
    - npx projen diff:dev
  variables: {}
deploy-dev:
  extends:
    - .aws_base
    - .artifacts_cdkdeploy
  stage: dev
  tags:
    - defaultTag
  only:
    refs:
      - main
  needs:
    - job: synth
      artifacts: true
    - job: publish_assets
    - job: diff-dev
  script:
    - "awslogin devRole "
    - npx projen install:ci
    - npx projen deploy:dev
  variables: {}
diff-prod:
  extends:
    - .aws_base
  stage: prod
  tags:
    - defaultTag
  only:
    refs:
      - main
  needs:
    - job: synth
      artifacts: true
    - job: publish_assets
  script:
    - "awslogin prodRole "
    - npx projen install:ci
    - npx projen diff:prod
  variables: {}
deploy-prod:
  extends:
    - .aws_base
    - .artifacts_cdkdeploy
  stage: prod
  tags:
    - defaultTag
  when: manual
  only:
    refs:
      - main
  needs:
    - job: synth
      artifacts: true
    - job: publish_assets
    - job: diff-prod
  script:
    - "awslogin prodRole "
    - npx projen install:ci
    - npx projen deploy:prod
  variables: {}
"
`;

exports[`Gitlab snapshot with runner tags 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

stages:
  - synth
  - publish_assets
  - dev
  - prod
.artifacts_cdk:
  artifacts:
    when: on_success
    expire_in: 30 days
    name: CDK Assembly - $CI_JOB_NAME-$CI_COMMIT_REF_SLUG
    untracked: false
    paths:
      - cdk.out
.artifacts_cdkdeploy:
  artifacts:
    when: on_success
    expire_in: 30 days
    name: CDK Outputs - $CI_JOB_NAME-$CI_COMMIT_REF_SLUG
    untracked: false
    paths:
      - cdk-outputs-*.json
.aws_base:
  image:
    name: "image: jsii/superchain:1-buster-slim-node18"
  id_tokens:
    AWS_TOKEN:
      aud: https://sts.amazonaws.com
  variables:
    CI: "true"
  before_script:
    - |
      check_variables_defined() {
        for var in "$@"; do
          if [ -z "$(eval "echo \\$$var")" ]; then
            log_fatal "\${var} not defined";
          fi
        done
      }

      awslogin() {
        roleArn=\${1: -\${AWS_ROLE_ARN}}
        sessionName=\${2:-GitLabRunner-\${CI_PROJECT_ID}-\${CI_PIPELINE_ID}}
        check_variables_defined roleArn AWS_TOKEN
        export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" $(aws sts assume-role-with-web-identity --role-arn \${roleArn} --role-session-name "\${sessionName}" --web-identity-token \${AWS_TOKEN} --duration-seconds 3600 --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' --output text))
        # TODO CODE ARTIFACT
      }
synth:
  extends:
    - .aws_base
    - .artifacts_cdk
  needs: []
  stage: synth
  tags:
    - synthTag
  script:
    - "awslogin synthRole "
    - npx projen install:ci
    - npx projen build
  variables: {}
publish_assets:
  extends:
    - .aws_base
  stage: publish_assets
  tags:
    - assetTag
  needs:
    - job: synth
      artifacts: true
  script:
    - "awslogin publishRole "
    - npx projen install:ci
    - npx projen publish:assets
  variables: {}
diff-dev:
  extends:
    - .aws_base
  stage: dev
  tags:
    - devDiffTag
  only:
    refs:
      - main
  needs:
    - job: synth
      artifacts: true
    - job: publish_assets
  script:
    - "awslogin devRole "
    - npx projen install:ci
    - npx projen diff:dev
  variables: {}
deploy-dev:
  extends:
    - .aws_base
    - .artifacts_cdkdeploy
  stage: dev
  tags:
    - devTag
  only:
    refs:
      - main
  needs:
    - job: synth
      artifacts: true
    - job: publish_assets
    - job: diff-dev
  script:
    - "awslogin devRole "
    - npx projen install:ci
    - npx projen deploy:dev
  variables: {}
diff-prod:
  extends:
    - .aws_base
  stage: prod
  tags:
    - prodTag
  only:
    refs:
      - main
  needs:
    - job: synth
      artifacts: true
    - job: publish_assets
  script:
    - "awslogin prodRole "
    - npx projen install:ci
    - npx projen diff:prod
  variables: {}
deploy-prod:
  extends:
    - .aws_base
    - .artifacts_cdkdeploy
  stage: prod
  tags:
    - prodTag
  when: manual
  only:
    refs:
      - main
  needs:
    - job: synth
      artifacts: true
    - job: publish_assets
    - job: diff-prod
  script:
    - "awslogin prodRole "
    - npx projen install:ci
    - npx projen deploy:prod
  variables: {}
"
`;
