// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AmplifyDeployStep can be added as post-deployment step to CDK Pipeline 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: deploy
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  synth:
    name: Synth CDK application
    needs: []
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      CI: "true"
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Checkout
        uses: actions/checkout@v4
      - run: npx projen install:ci
      - run: npx projen build
      - name: Upload Artifact
        uses: actions/upload-artifact@v4.3.6
        with:
          name: cloud-assembly
          path: cdk.out/
  assetUpload:
    name: Publish assets to AWS
    needs: synth
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      CI: "true"
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: git config --global user.name "github-actions" && git config --global user.email "github-actions@github.com"
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: cloud-assembly
          path: cdk.out/
      - run: npx projen install:ci
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123456789012:role/DeploymentRole
          role-session-name: GitHubAction
          aws-region: us-east-1
      - run: npx projen publish:assets
  deploy-prod:
    name: Deploy stage prod to AWS
    needs: assetUpload
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    concurrency:
      group: deploy-prod
      cancel-in-progress: false
    env:
      CI: "true"
      AWS_REGION: us-east-1
      AWS_DEFAULT_REGION: us-east-1
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: cloud-assembly
          path: cdk.out/
      - run: npx projen install:ci
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123456789012:role/DeploymentRole
          role-session-name: GitHubAction
          aws-region: us-east-1
      - run: npx projen deploy:prod
      - name: Extract Amplify App ID
        env:
          ENVIRONMENT: prod
        run: AMPLIFY_APP_ID=$(jq -r '.MyStack.AmplifyAppId' cdk-outputs-prod.json) && echo "AMPLIFY_APP_ID=$AMPLIFY_APP_ID" >> $GITHUB_ENV
      - name: Deploy to Amplify
        run: |-
          #!/bin/bash -e
          echo "Checking for pending Amplify jobs..."
          aws amplify list-jobs --app-id $AMPLIFY_APP_ID --branch-name main --max-items 1 > amplify-last-job.json
          AMPLIFY_LAST_JOB_STATUS=$(cat amplify-last-job.json | jq -r '.jobSummaries[].status')
          AMPLIFY_LAST_JOB_ID=$(cat amplify-last-job.json | jq -r '.jobSummaries[].jobId')
          if [ "$AMPLIFY_LAST_JOB_STATUS" = "PENDING" ]; then
            aws amplify stop-job --app-id $AMPLIFY_APP_ID --branch-name main --job-id $AMPLIFY_LAST_JOB_ID
          fi
          echo "Creating Amplify deployment..."
          aws amplify create-deployment --app-id $AMPLIFY_APP_ID --branch-name main > amplify-deploy.json
          AMPLIFY_ZIP_UPLOAD_URL=$(cat amplify-deploy.json | jq -r '.zipUploadUrl')
          AMPLIFY_JOB_ID=$(cat amplify-deploy.json | jq -r '.jobId')
          echo "Uploading deployment artifact..."
          curl -H "Content-Type: application/zip" $AMPLIFY_ZIP_UPLOAD_URL --upload-file website.zip
          echo "Starting Amplify deployment..."
          aws amplify start-deployment --app-id $AMPLIFY_APP_ID --branch-name main --job-id $AMPLIFY_JOB_ID
          while :; do
            sleep 10
            STATUS=$(aws amplify get-job --app-id $AMPLIFY_APP_ID --branch-name main --job-id $AMPLIFY_JOB_ID | jq -r '.job.summary.status')
            if [ "$STATUS" != "PENDING" ] && [ "$STATUS" != "RUNNING" ]; then
              break
            fi
            echo "Deployment status: $STATUS"
          done
          rm -f amplify-last-job.json amplify-deploy.json
          echo "Amplify deployment completed with status: $STATUS"
          if [ "$STATUS" != "SUCCEED" ]; then
            echo "Deployment failed with status: $STATUS"
            exit 1
          fi
      - name: Upload Artifact
        uses: actions/upload-artifact@v4.3.6
        with:
          name: cdk-outputs-prod
          path: cdk-outputs-prod.json
"
`;

exports[`AmplifyDeployStep generates correct configuration with command-based app ID extraction 1`] = `
{
  "commands": [
    "export AWS_REGION="eu-central-1"",
    "export AWS_DEFAULT_REGION="eu-central-1"",
    "AMPLIFY_APP_ID=$(jq -r '.MyStack.AmplifyAppId' cdk-outputs-production.json)",
    "echo "Checking for pending Amplify jobs..."",
    "aws amplify list-jobs --app-id $AMPLIFY_APP_ID --branch-name main --max-items 1 > amplify-last-job.json",
    "AMPLIFY_LAST_JOB_STATUS=$(cat amplify-last-job.json | jq -r '.jobSummaries[].status')",
    "AMPLIFY_LAST_JOB_ID=$(cat amplify-last-job.json | jq -r '.jobSummaries[].jobId')",
    "if [ "$AMPLIFY_LAST_JOB_STATUS" = "PENDING" ]; then",
    "  aws amplify stop-job --app-id $AMPLIFY_APP_ID --branch-name main --job-id $AMPLIFY_LAST_JOB_ID",
    "fi",
    "echo "Creating Amplify deployment..."",
    "aws amplify create-deployment --app-id $AMPLIFY_APP_ID --branch-name main > amplify-deploy.json",
    "AMPLIFY_ZIP_UPLOAD_URL=$(cat amplify-deploy.json | jq -r '.zipUploadUrl')",
    "AMPLIFY_JOB_ID=$(cat amplify-deploy.json | jq -r '.jobId')",
    "echo "Uploading deployment artifact..."",
    "curl -H "Content-Type: application/zip" $AMPLIFY_ZIP_UPLOAD_URL --upload-file website.zip",
    "echo "Starting Amplify deployment..."",
    "aws amplify start-deployment --app-id $AMPLIFY_APP_ID --branch-name main --job-id $AMPLIFY_JOB_ID",
    "while :; do",
    "  sleep 10",
    "  STATUS=$(aws amplify get-job --app-id $AMPLIFY_APP_ID --branch-name main --job-id $AMPLIFY_JOB_ID | jq -r '.job.summary.status')",
    "  if [ "$STATUS" != "PENDING" ] && [ "$STATUS" != "RUNNING" ]; then",
    "    break",
    "  fi",
    "  echo "Deployment status: $STATUS"",
    "done",
    "rm -f amplify-last-job.json amplify-deploy.json",
    "echo "Amplify deployment completed with status: $STATUS"",
    "if [ "$STATUS" != "SUCCEED" ]; then",
    "  echo "Deployment failed with status: $STATUS"",
    "  exit 1",
    "fi",
  ],
}
`;

exports[`AmplifyDeployStep generates correct configuration with command-based app ID extraction 2`] = `
{
  "env": {
    "AWS_DEFAULT_REGION": "eu-central-1",
    "AWS_REGION": "eu-central-1",
  },
  "needs": [],
  "steps": [
    {
      "env": {
        "ENVIRONMENT": "production",
      },
      "name": "Extract Amplify App ID",
      "run": "AMPLIFY_APP_ID=$(jq -r '.MyStack.AmplifyAppId' cdk-outputs-production.json) && echo "AMPLIFY_APP_ID=$AMPLIFY_APP_ID" >> $GITHUB_ENV",
    },
    {
      "name": "Deploy to Amplify",
      "run": "#!/bin/bash -e
echo "Checking for pending Amplify jobs..."
aws amplify list-jobs --app-id $AMPLIFY_APP_ID --branch-name main --max-items 1 > amplify-last-job.json
AMPLIFY_LAST_JOB_STATUS=$(cat amplify-last-job.json | jq -r '.jobSummaries[].status')
AMPLIFY_LAST_JOB_ID=$(cat amplify-last-job.json | jq -r '.jobSummaries[].jobId')
if [ "$AMPLIFY_LAST_JOB_STATUS" = "PENDING" ]; then
  aws amplify stop-job --app-id $AMPLIFY_APP_ID --branch-name main --job-id $AMPLIFY_LAST_JOB_ID
fi
echo "Creating Amplify deployment..."
aws amplify create-deployment --app-id $AMPLIFY_APP_ID --branch-name main > amplify-deploy.json
AMPLIFY_ZIP_UPLOAD_URL=$(cat amplify-deploy.json | jq -r '.zipUploadUrl')
AMPLIFY_JOB_ID=$(cat amplify-deploy.json | jq -r '.jobId')
echo "Uploading deployment artifact..."
curl -H "Content-Type: application/zip" $AMPLIFY_ZIP_UPLOAD_URL --upload-file website.zip
echo "Starting Amplify deployment..."
aws amplify start-deployment --app-id $AMPLIFY_APP_ID --branch-name main --job-id $AMPLIFY_JOB_ID
while :; do
  sleep 10
  STATUS=$(aws amplify get-job --app-id $AMPLIFY_APP_ID --branch-name main --job-id $AMPLIFY_JOB_ID | jq -r '.job.summary.status')
  if [ "$STATUS" != "PENDING" ] && [ "$STATUS" != "RUNNING" ]; then
    break
  fi
  echo "Deployment status: $STATUS"
done
rm -f amplify-last-job.json amplify-deploy.json
echo "Amplify deployment completed with status: $STATUS"
if [ "$STATUS" != "SUCCEED" ]; then
  echo "Deployment failed with status: $STATUS"
  exit 1
fi",
    },
  ],
}
`;

exports[`AmplifyDeployStep generates correct configuration with command-based app ID extraction 3`] = `
{
  "commands": [
    "AMPLIFY_APP_ID=$(jq -r '.MyStack.AmplifyAppId' cdk-outputs-production.json)",
    "echo "Checking for pending Amplify jobs..."",
    "aws amplify list-jobs --app-id $AMPLIFY_APP_ID --branch-name main --max-items 1 > amplify-last-job.json",
    "AMPLIFY_LAST_JOB_STATUS=$(cat amplify-last-job.json | jq -r '.jobSummaries[].status')",
    "AMPLIFY_LAST_JOB_ID=$(cat amplify-last-job.json | jq -r '.jobSummaries[].jobId')",
    "if [ "$AMPLIFY_LAST_JOB_STATUS" = "PENDING" ]; then",
    "  aws amplify stop-job --app-id $AMPLIFY_APP_ID --branch-name main --job-id $AMPLIFY_LAST_JOB_ID",
    "fi",
    "echo "Creating Amplify deployment..."",
    "aws amplify create-deployment --app-id $AMPLIFY_APP_ID --branch-name main > amplify-deploy.json",
    "AMPLIFY_ZIP_UPLOAD_URL=$(cat amplify-deploy.json | jq -r '.zipUploadUrl')",
    "AMPLIFY_JOB_ID=$(cat amplify-deploy.json | jq -r '.jobId')",
    "echo "Uploading deployment artifact..."",
    "curl -H "Content-Type: application/zip" $AMPLIFY_ZIP_UPLOAD_URL --upload-file website.zip",
    "echo "Starting Amplify deployment..."",
    "aws amplify start-deployment --app-id $AMPLIFY_APP_ID --branch-name main --job-id $AMPLIFY_JOB_ID",
    "while :; do",
    "  sleep 10",
    "  STATUS=$(aws amplify get-job --app-id $AMPLIFY_APP_ID --branch-name main --job-id $AMPLIFY_JOB_ID | jq -r '.job.summary.status')",
    "  if [ "$STATUS" != "PENDING" ] && [ "$STATUS" != "RUNNING" ]; then",
    "    break",
    "  fi",
    "  echo "Deployment status: $STATUS"",
    "done",
    "rm -f amplify-last-job.json amplify-deploy.json",
    "echo "Amplify deployment completed with status: $STATUS"",
    "if [ "$STATUS" != "SUCCEED" ]; then",
    "  echo "Deployment failed with status: $STATUS"",
    "  exit 1",
    "fi",
  ],
  "env": {
    "AWS_DEFAULT_REGION": "eu-central-1",
    "AWS_REGION": "eu-central-1",
  },
  "extensions": [],
  "needs": [],
}
`;

exports[`AmplifyDeployStep generates correct configuration with custom branch and region 1`] = `
{
  "commands": [
    "export AWS_REGION="us-west-2"",
    "export AWS_DEFAULT_REGION="us-west-2"",
    "AMPLIFY_APP_ID="d123gtgt770s1x"",
    "echo "Checking for pending Amplify jobs..."",
    "aws amplify list-jobs --app-id $AMPLIFY_APP_ID --branch-name develop --max-items 1 > amplify-last-job.json",
    "AMPLIFY_LAST_JOB_STATUS=$(cat amplify-last-job.json | jq -r '.jobSummaries[].status')",
    "AMPLIFY_LAST_JOB_ID=$(cat amplify-last-job.json | jq -r '.jobSummaries[].jobId')",
    "if [ "$AMPLIFY_LAST_JOB_STATUS" = "PENDING" ]; then",
    "  aws amplify stop-job --app-id $AMPLIFY_APP_ID --branch-name develop --job-id $AMPLIFY_LAST_JOB_ID",
    "fi",
    "echo "Creating Amplify deployment..."",
    "aws amplify create-deployment --app-id $AMPLIFY_APP_ID --branch-name develop > amplify-deploy.json",
    "AMPLIFY_ZIP_UPLOAD_URL=$(cat amplify-deploy.json | jq -r '.zipUploadUrl')",
    "AMPLIFY_JOB_ID=$(cat amplify-deploy.json | jq -r '.jobId')",
    "echo "Uploading deployment artifact..."",
    "curl -H "Content-Type: application/zip" $AMPLIFY_ZIP_UPLOAD_URL --upload-file build.zip",
    "echo "Starting Amplify deployment..."",
    "aws amplify start-deployment --app-id $AMPLIFY_APP_ID --branch-name develop --job-id $AMPLIFY_JOB_ID",
    "while :; do",
    "  sleep 10",
    "  STATUS=$(aws amplify get-job --app-id $AMPLIFY_APP_ID --branch-name develop --job-id $AMPLIFY_JOB_ID | jq -r '.job.summary.status')",
    "  if [ "$STATUS" != "PENDING" ] && [ "$STATUS" != "RUNNING" ]; then",
    "    break",
    "  fi",
    "  echo "Deployment status: $STATUS"",
    "done",
    "rm -f amplify-last-job.json amplify-deploy.json",
    "echo "Amplify deployment completed with status: $STATUS"",
    "if [ "$STATUS" != "SUCCEED" ]; then",
    "  echo "Deployment failed with status: $STATUS"",
    "  exit 1",
    "fi",
  ],
}
`;

exports[`AmplifyDeployStep generates correct configuration with custom branch and region 2`] = `
{
  "env": {
    "AWS_DEFAULT_REGION": "us-west-2",
    "AWS_REGION": "us-west-2",
  },
  "needs": [],
  "steps": [
    {
      "name": "Set Amplify App ID",
      "run": "echo "AMPLIFY_APP_ID=d123gtgt770s1x" >> $GITHUB_ENV",
    },
    {
      "name": "Deploy to Amplify",
      "run": "#!/bin/bash -e
echo "Checking for pending Amplify jobs..."
aws amplify list-jobs --app-id $AMPLIFY_APP_ID --branch-name develop --max-items 1 > amplify-last-job.json
AMPLIFY_LAST_JOB_STATUS=$(cat amplify-last-job.json | jq -r '.jobSummaries[].status')
AMPLIFY_LAST_JOB_ID=$(cat amplify-last-job.json | jq -r '.jobSummaries[].jobId')
if [ "$AMPLIFY_LAST_JOB_STATUS" = "PENDING" ]; then
  aws amplify stop-job --app-id $AMPLIFY_APP_ID --branch-name develop --job-id $AMPLIFY_LAST_JOB_ID
fi
echo "Creating Amplify deployment..."
aws amplify create-deployment --app-id $AMPLIFY_APP_ID --branch-name develop > amplify-deploy.json
AMPLIFY_ZIP_UPLOAD_URL=$(cat amplify-deploy.json | jq -r '.zipUploadUrl')
AMPLIFY_JOB_ID=$(cat amplify-deploy.json | jq -r '.jobId')
echo "Uploading deployment artifact..."
curl -H "Content-Type: application/zip" $AMPLIFY_ZIP_UPLOAD_URL --upload-file build.zip
echo "Starting Amplify deployment..."
aws amplify start-deployment --app-id $AMPLIFY_APP_ID --branch-name develop --job-id $AMPLIFY_JOB_ID
while :; do
  sleep 10
  STATUS=$(aws amplify get-job --app-id $AMPLIFY_APP_ID --branch-name develop --job-id $AMPLIFY_JOB_ID | jq -r '.job.summary.status')
  if [ "$STATUS" != "PENDING" ] && [ "$STATUS" != "RUNNING" ]; then
    break
  fi
  echo "Deployment status: $STATUS"
done
rm -f amplify-last-job.json amplify-deploy.json
echo "Amplify deployment completed with status: $STATUS"
if [ "$STATUS" != "SUCCEED" ]; then
  echo "Deployment failed with status: $STATUS"
  exit 1
fi",
    },
  ],
}
`;

exports[`AmplifyDeployStep generates correct configuration with custom branch and region 3`] = `
{
  "commands": [
    "AMPLIFY_APP_ID="d123gtgt770s1x"",
    "echo "Checking for pending Amplify jobs..."",
    "aws amplify list-jobs --app-id $AMPLIFY_APP_ID --branch-name develop --max-items 1 > amplify-last-job.json",
    "AMPLIFY_LAST_JOB_STATUS=$(cat amplify-last-job.json | jq -r '.jobSummaries[].status')",
    "AMPLIFY_LAST_JOB_ID=$(cat amplify-last-job.json | jq -r '.jobSummaries[].jobId')",
    "if [ "$AMPLIFY_LAST_JOB_STATUS" = "PENDING" ]; then",
    "  aws amplify stop-job --app-id $AMPLIFY_APP_ID --branch-name develop --job-id $AMPLIFY_LAST_JOB_ID",
    "fi",
    "echo "Creating Amplify deployment..."",
    "aws amplify create-deployment --app-id $AMPLIFY_APP_ID --branch-name develop > amplify-deploy.json",
    "AMPLIFY_ZIP_UPLOAD_URL=$(cat amplify-deploy.json | jq -r '.zipUploadUrl')",
    "AMPLIFY_JOB_ID=$(cat amplify-deploy.json | jq -r '.jobId')",
    "echo "Uploading deployment artifact..."",
    "curl -H "Content-Type: application/zip" $AMPLIFY_ZIP_UPLOAD_URL --upload-file build.zip",
    "echo "Starting Amplify deployment..."",
    "aws amplify start-deployment --app-id $AMPLIFY_APP_ID --branch-name develop --job-id $AMPLIFY_JOB_ID",
    "while :; do",
    "  sleep 10",
    "  STATUS=$(aws amplify get-job --app-id $AMPLIFY_APP_ID --branch-name develop --job-id $AMPLIFY_JOB_ID | jq -r '.job.summary.status')",
    "  if [ "$STATUS" != "PENDING" ] && [ "$STATUS" != "RUNNING" ]; then",
    "    break",
    "  fi",
    "  echo "Deployment status: $STATUS"",
    "done",
    "rm -f amplify-last-job.json amplify-deploy.json",
    "echo "Amplify deployment completed with status: $STATUS"",
    "if [ "$STATUS" != "SUCCEED" ]; then",
    "  echo "Deployment failed with status: $STATUS"",
    "  exit 1",
    "fi",
  ],
  "env": {
    "AWS_DEFAULT_REGION": "us-west-2",
    "AWS_REGION": "us-west-2",
  },
  "extensions": [],
  "needs": [],
}
`;

exports[`AmplifyDeployStep generates correct configuration with direct app ID 1`] = `
{
  "commands": [
    "export AWS_REGION="eu-central-1"",
    "export AWS_DEFAULT_REGION="eu-central-1"",
    "AMPLIFY_APP_ID="d123gtgt770s1x"",
    "echo "Checking for pending Amplify jobs..."",
    "aws amplify list-jobs --app-id $AMPLIFY_APP_ID --branch-name main --max-items 1 > amplify-last-job.json",
    "AMPLIFY_LAST_JOB_STATUS=$(cat amplify-last-job.json | jq -r '.jobSummaries[].status')",
    "AMPLIFY_LAST_JOB_ID=$(cat amplify-last-job.json | jq -r '.jobSummaries[].jobId')",
    "if [ "$AMPLIFY_LAST_JOB_STATUS" = "PENDING" ]; then",
    "  aws amplify stop-job --app-id $AMPLIFY_APP_ID --branch-name main --job-id $AMPLIFY_LAST_JOB_ID",
    "fi",
    "echo "Creating Amplify deployment..."",
    "aws amplify create-deployment --app-id $AMPLIFY_APP_ID --branch-name main > amplify-deploy.json",
    "AMPLIFY_ZIP_UPLOAD_URL=$(cat amplify-deploy.json | jq -r '.zipUploadUrl')",
    "AMPLIFY_JOB_ID=$(cat amplify-deploy.json | jq -r '.jobId')",
    "echo "Uploading deployment artifact..."",
    "curl -H "Content-Type: application/zip" $AMPLIFY_ZIP_UPLOAD_URL --upload-file dist.zip",
    "echo "Starting Amplify deployment..."",
    "aws amplify start-deployment --app-id $AMPLIFY_APP_ID --branch-name main --job-id $AMPLIFY_JOB_ID",
    "while :; do",
    "  sleep 10",
    "  STATUS=$(aws amplify get-job --app-id $AMPLIFY_APP_ID --branch-name main --job-id $AMPLIFY_JOB_ID | jq -r '.job.summary.status')",
    "  if [ "$STATUS" != "PENDING" ] && [ "$STATUS" != "RUNNING" ]; then",
    "    break",
    "  fi",
    "  echo "Deployment status: $STATUS"",
    "done",
    "rm -f amplify-last-job.json amplify-deploy.json",
    "echo "Amplify deployment completed with status: $STATUS"",
    "if [ "$STATUS" != "SUCCEED" ]; then",
    "  echo "Deployment failed with status: $STATUS"",
    "  exit 1",
    "fi",
  ],
}
`;

exports[`AmplifyDeployStep generates correct configuration with direct app ID 2`] = `
{
  "env": {
    "AWS_DEFAULT_REGION": "eu-central-1",
    "AWS_REGION": "eu-central-1",
  },
  "needs": [],
  "steps": [
    {
      "name": "Set Amplify App ID",
      "run": "echo "AMPLIFY_APP_ID=d123gtgt770s1x" >> $GITHUB_ENV",
    },
    {
      "name": "Deploy to Amplify",
      "run": "#!/bin/bash -e
echo "Checking for pending Amplify jobs..."
aws amplify list-jobs --app-id $AMPLIFY_APP_ID --branch-name main --max-items 1 > amplify-last-job.json
AMPLIFY_LAST_JOB_STATUS=$(cat amplify-last-job.json | jq -r '.jobSummaries[].status')
AMPLIFY_LAST_JOB_ID=$(cat amplify-last-job.json | jq -r '.jobSummaries[].jobId')
if [ "$AMPLIFY_LAST_JOB_STATUS" = "PENDING" ]; then
  aws amplify stop-job --app-id $AMPLIFY_APP_ID --branch-name main --job-id $AMPLIFY_LAST_JOB_ID
fi
echo "Creating Amplify deployment..."
aws amplify create-deployment --app-id $AMPLIFY_APP_ID --branch-name main > amplify-deploy.json
AMPLIFY_ZIP_UPLOAD_URL=$(cat amplify-deploy.json | jq -r '.zipUploadUrl')
AMPLIFY_JOB_ID=$(cat amplify-deploy.json | jq -r '.jobId')
echo "Uploading deployment artifact..."
curl -H "Content-Type: application/zip" $AMPLIFY_ZIP_UPLOAD_URL --upload-file dist.zip
echo "Starting Amplify deployment..."
aws amplify start-deployment --app-id $AMPLIFY_APP_ID --branch-name main --job-id $AMPLIFY_JOB_ID
while :; do
  sleep 10
  STATUS=$(aws amplify get-job --app-id $AMPLIFY_APP_ID --branch-name main --job-id $AMPLIFY_JOB_ID | jq -r '.job.summary.status')
  if [ "$STATUS" != "PENDING" ] && [ "$STATUS" != "RUNNING" ]; then
    break
  fi
  echo "Deployment status: $STATUS"
done
rm -f amplify-last-job.json amplify-deploy.json
echo "Amplify deployment completed with status: $STATUS"
if [ "$STATUS" != "SUCCEED" ]; then
  echo "Deployment failed with status: $STATUS"
  exit 1
fi",
    },
  ],
}
`;

exports[`AmplifyDeployStep generates correct configuration with direct app ID 3`] = `
{
  "commands": [
    "AMPLIFY_APP_ID="d123gtgt770s1x"",
    "echo "Checking for pending Amplify jobs..."",
    "aws amplify list-jobs --app-id $AMPLIFY_APP_ID --branch-name main --max-items 1 > amplify-last-job.json",
    "AMPLIFY_LAST_JOB_STATUS=$(cat amplify-last-job.json | jq -r '.jobSummaries[].status')",
    "AMPLIFY_LAST_JOB_ID=$(cat amplify-last-job.json | jq -r '.jobSummaries[].jobId')",
    "if [ "$AMPLIFY_LAST_JOB_STATUS" = "PENDING" ]; then",
    "  aws amplify stop-job --app-id $AMPLIFY_APP_ID --branch-name main --job-id $AMPLIFY_LAST_JOB_ID",
    "fi",
    "echo "Creating Amplify deployment..."",
    "aws amplify create-deployment --app-id $AMPLIFY_APP_ID --branch-name main > amplify-deploy.json",
    "AMPLIFY_ZIP_UPLOAD_URL=$(cat amplify-deploy.json | jq -r '.zipUploadUrl')",
    "AMPLIFY_JOB_ID=$(cat amplify-deploy.json | jq -r '.jobId')",
    "echo "Uploading deployment artifact..."",
    "curl -H "Content-Type: application/zip" $AMPLIFY_ZIP_UPLOAD_URL --upload-file dist.zip",
    "echo "Starting Amplify deployment..."",
    "aws amplify start-deployment --app-id $AMPLIFY_APP_ID --branch-name main --job-id $AMPLIFY_JOB_ID",
    "while :; do",
    "  sleep 10",
    "  STATUS=$(aws amplify get-job --app-id $AMPLIFY_APP_ID --branch-name main --job-id $AMPLIFY_JOB_ID | jq -r '.job.summary.status')",
    "  if [ "$STATUS" != "PENDING" ] && [ "$STATUS" != "RUNNING" ]; then",
    "    break",
    "  fi",
    "  echo "Deployment status: $STATUS"",
    "done",
    "rm -f amplify-last-job.json amplify-deploy.json",
    "echo "Amplify deployment completed with status: $STATUS"",
    "if [ "$STATUS" != "SUCCEED" ]; then",
    "  echo "Deployment failed with status: $STATUS"",
    "  exit 1",
    "fi",
  ],
  "env": {
    "AWS_DEFAULT_REGION": "eu-central-1",
    "AWS_REGION": "eu-central-1",
  },
  "extensions": [],
  "needs": [],
}
`;

exports[`AmplifyDeployStep integrates with CDK Pipeline using static app ID 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: deploy
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  synth:
    name: Synth CDK application
    needs: []
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      CI: "true"
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Checkout
        uses: actions/checkout@v4
      - run: npx projen install:ci
      - run: npx projen build
      - name: Upload Artifact
        uses: actions/upload-artifact@v4.3.6
        with:
          name: cloud-assembly
          path: cdk.out/
  assetUpload:
    name: Publish assets to AWS
    needs: synth
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      CI: "true"
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: git config --global user.name "github-actions" && git config --global user.email "github-actions@github.com"
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: cloud-assembly
          path: cdk.out/
      - run: npx projen install:ci
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123456789012:role/DeploymentRole
          role-session-name: GitHubAction
          aws-region: us-east-1
      - run: npx projen publish:assets
  deploy-production:
    name: Deploy stage production to AWS
    needs: assetUpload
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    concurrency:
      group: deploy-production
      cancel-in-progress: false
    env:
      CI: "true"
      AWS_REGION: ap-southeast-1
      AWS_DEFAULT_REGION: ap-southeast-1
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: cloud-assembly
          path: cdk.out/
      - run: npx projen install:ci
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123456789012:role/DeploymentRole
          role-session-name: GitHubAction
          aws-region: ap-southeast-1
      - run: npx projen deploy:production
      - name: Set Amplify App ID
        run: echo "AMPLIFY_APP_ID=d123gtgt770s1x" >> $GITHUB_ENV
      - name: Deploy to Amplify
        run: |-
          #!/bin/bash -e
          echo "Checking for pending Amplify jobs..."
          aws amplify list-jobs --app-id $AMPLIFY_APP_ID --branch-name production --max-items 1 > amplify-last-job.json
          AMPLIFY_LAST_JOB_STATUS=$(cat amplify-last-job.json | jq -r '.jobSummaries[].status')
          AMPLIFY_LAST_JOB_ID=$(cat amplify-last-job.json | jq -r '.jobSummaries[].jobId')
          if [ "$AMPLIFY_LAST_JOB_STATUS" = "PENDING" ]; then
            aws amplify stop-job --app-id $AMPLIFY_APP_ID --branch-name production --job-id $AMPLIFY_LAST_JOB_ID
          fi
          echo "Creating Amplify deployment..."
          aws amplify create-deployment --app-id $AMPLIFY_APP_ID --branch-name production > amplify-deploy.json
          AMPLIFY_ZIP_UPLOAD_URL=$(cat amplify-deploy.json | jq -r '.zipUploadUrl')
          AMPLIFY_JOB_ID=$(cat amplify-deploy.json | jq -r '.jobId')
          echo "Uploading deployment artifact..."
          curl -H "Content-Type: application/zip" $AMPLIFY_ZIP_UPLOAD_URL --upload-file dist.zip
          echo "Starting Amplify deployment..."
          aws amplify start-deployment --app-id $AMPLIFY_APP_ID --branch-name production --job-id $AMPLIFY_JOB_ID
          while :; do
            sleep 10
            STATUS=$(aws amplify get-job --app-id $AMPLIFY_APP_ID --branch-name production --job-id $AMPLIFY_JOB_ID | jq -r '.job.summary.status')
            if [ "$STATUS" != "PENDING" ] && [ "$STATUS" != "RUNNING" ]; then
              break
            fi
            echo "Deployment status: $STATUS"
          done
          rm -f amplify-last-job.json amplify-deploy.json
          echo "Amplify deployment completed with status: $STATUS"
          if [ "$STATUS" != "SUCCEED" ]; then
            echo "Deployment failed with status: $STATUS"
            exit 1
          fi
      - name: Upload Artifact
        uses: actions/upload-artifact@v4.3.6
        with:
          name: cdk-outputs-production
          path: cdk-outputs-production.json
"
`;

exports[`AmplifyDeployStep supports multiple Amplify deployments for different stages 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: deploy
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  synth:
    name: Synth CDK application
    needs: []
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      CI: "true"
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Checkout
        uses: actions/checkout@v4
      - run: npx projen install:ci
      - run: npx projen build
      - name: Upload Artifact
        uses: actions/upload-artifact@v4.3.6
        with:
          name: cloud-assembly
          path: cdk.out/
  assetUpload:
    name: Publish assets to AWS
    needs: synth
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    env:
      CI: "true"
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: git config --global user.name "github-actions" && git config --global user.email "github-actions@github.com"
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: cloud-assembly
          path: cdk.out/
      - run: npx projen install:ci
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123456789012:role/DeploymentRole
          role-session-name: GitHubAction
          aws-region: us-east-1
      - run: npx projen publish:assets
      - run: npx projen bump
      - run: npx projen release:push-assembly
  deploy-dev:
    name: Deploy stage dev to AWS
    needs: assetUpload
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    concurrency:
      group: deploy-dev
      cancel-in-progress: false
    env:
      CI: "true"
      AWS_REGION: eu-central-1
      AWS_DEFAULT_REGION: eu-central-1
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: cloud-assembly
          path: cdk.out/
      - run: npx projen install:ci
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123456789012:role/DeploymentRole
          role-session-name: GitHubAction
          aws-region: eu-central-1
      - run: npx projen deploy:dev
      - name: Extract Amplify App ID
        env:
          ENVIRONMENT: dev
        run: AMPLIFY_APP_ID=$(jq -r '.DevStack.AmplifyAppId' cdk-outputs-dev.json) && echo "AMPLIFY_APP_ID=$AMPLIFY_APP_ID" >> $GITHUB_ENV
      - name: Deploy to Amplify
        run: |-
          #!/bin/bash -e
          echo "Checking for pending Amplify jobs..."
          aws amplify list-jobs --app-id $AMPLIFY_APP_ID --branch-name develop --max-items 1 > amplify-last-job.json
          AMPLIFY_LAST_JOB_STATUS=$(cat amplify-last-job.json | jq -r '.jobSummaries[].status')
          AMPLIFY_LAST_JOB_ID=$(cat amplify-last-job.json | jq -r '.jobSummaries[].jobId')
          if [ "$AMPLIFY_LAST_JOB_STATUS" = "PENDING" ]; then
            aws amplify stop-job --app-id $AMPLIFY_APP_ID --branch-name develop --job-id $AMPLIFY_LAST_JOB_ID
          fi
          echo "Creating Amplify deployment..."
          aws amplify create-deployment --app-id $AMPLIFY_APP_ID --branch-name develop > amplify-deploy.json
          AMPLIFY_ZIP_UPLOAD_URL=$(cat amplify-deploy.json | jq -r '.zipUploadUrl')
          AMPLIFY_JOB_ID=$(cat amplify-deploy.json | jq -r '.jobId')
          echo "Uploading deployment artifact..."
          curl -H "Content-Type: application/zip" $AMPLIFY_ZIP_UPLOAD_URL --upload-file website-dev.zip
          echo "Starting Amplify deployment..."
          aws amplify start-deployment --app-id $AMPLIFY_APP_ID --branch-name develop --job-id $AMPLIFY_JOB_ID
          while :; do
            sleep 10
            STATUS=$(aws amplify get-job --app-id $AMPLIFY_APP_ID --branch-name develop --job-id $AMPLIFY_JOB_ID | jq -r '.job.summary.status')
            if [ "$STATUS" != "PENDING" ] && [ "$STATUS" != "RUNNING" ]; then
              break
            fi
            echo "Deployment status: $STATUS"
          done
          rm -f amplify-last-job.json amplify-deploy.json
          echo "Amplify deployment completed with status: $STATUS"
          if [ "$STATUS" != "SUCCEED" ]; then
            echo "Deployment failed with status: $STATUS"
            exit 1
          fi
      - name: Upload Artifact
        uses: actions/upload-artifact@v4.3.6
        with:
          name: cdk-outputs-dev
          path: cdk-outputs-dev.json
"
`;
