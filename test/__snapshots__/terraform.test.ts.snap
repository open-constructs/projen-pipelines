// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Github snapshot 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: deploy
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  plan:
    name: Plan Terraform changes
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      CI: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: defaultRole
          role-session-name: GitHubAction
          aws-region: us-east-1
      - run: npx projen tf:plan
  apply:
    name: Apply
    needs: plan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      CI: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: defaultRole
          role-session-name: GitHubAction
          aws-region: us-east-1
      - run: npx projen tf:apply
"
`;

exports[`Github snapshot 2`] = `
{
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
  "tasks": {
    "build": {
      "description": "Full release build",
      "name": "build",
      "steps": [
        {
          "spawn": "default",
        },
        {
          "spawn": "pre-compile",
        },
        {
          "spawn": "compile",
        },
        {
          "spawn": "post-compile",
        },
        {
          "spawn": "test",
        },
        {
          "spawn": "package",
        },
      ],
    },
    "clobber": {
      "condition": "git diff --exit-code > /dev/null",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)",
      },
      "name": "clobber",
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in "scratch" branch",
        },
        {
          "exec": "git checkout $BRANCH",
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin",
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit",
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files",
        },
        {
          "say": "ready to rock! (unpushed commits are under the "scratch" branch)",
        },
      ],
    },
    "compile": {
      "description": "Only compile",
      "name": "compile",
    },
    "default": {
      "description": "Synthesize project files",
      "name": "default",
    },
    "eject": {
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true",
      },
      "name": "eject",
      "steps": [
        {
          "spawn": "default",
        },
      ],
    },
    "package": {
      "description": "Creates the distribution package",
      "name": "package",
    },
    "post-compile": {
      "description": "Runs after successful compilation",
      "name": "post-compile",
    },
    "pre-compile": {
      "description": "Prepare the project for compilation",
      "name": "pre-compile",
    },
    "test": {
      "description": "Run tests",
      "name": "test",
    },
    "tf:apply": {
      "description": "Apply terraform changes",
      "name": "tf:apply",
      "steps": [
        {
          "exec": "cd . && terraform init && terraform apply -auto-approve",
        },
      ],
    },
    "tf:destroy": {
      "description": "Destroy terraform resources",
      "name": "tf:destroy",
      "steps": [
        {
          "exec": "cd . && terraform init && terraform destroy -auto-approve",
        },
      ],
    },
    "tf:init": {
      "description": "Initialize terraform",
      "name": "tf:init",
      "steps": [
        {
          "exec": "cd . && terraform init",
        },
      ],
    },
    "tf:plan": {
      "description": "Run terraform plan",
      "name": "tf:plan",
      "steps": [
        {
          "exec": "cd . && terraform init && terraform plan",
        },
      ],
    },
    "tf:validate": {
      "description": "Validate terraform configuration",
      "name": "tf:validate",
      "steps": [
        {
          "exec": "cd . && terraform validate",
        },
      ],
    },
  },
}
`;

exports[`Github snapshot with name 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: deploy-foo
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  plan:
    name: Plan Terraform changes
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      CI: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: defaultRole
          role-session-name: GitHubAction
          aws-region: us-east-1
      - run: npx projen tf:foo:plan
  apply:
    name: Apply
    needs: plan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      CI: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: defaultRole
          role-session-name: GitHubAction
          aws-region: us-east-1
      - run: npx projen tf:foo:apply
"
`;

exports[`Github snapshot with name 2`] = `
{
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
  "tasks": {
    "build": {
      "description": "Full release build",
      "name": "build",
      "steps": [
        {
          "spawn": "default",
        },
        {
          "spawn": "pre-compile",
        },
        {
          "spawn": "compile",
        },
        {
          "spawn": "post-compile",
        },
        {
          "spawn": "test",
        },
        {
          "spawn": "package",
        },
      ],
    },
    "clobber": {
      "condition": "git diff --exit-code > /dev/null",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)",
      },
      "name": "clobber",
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in "scratch" branch",
        },
        {
          "exec": "git checkout $BRANCH",
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin",
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit",
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files",
        },
        {
          "say": "ready to rock! (unpushed commits are under the "scratch" branch)",
        },
      ],
    },
    "compile": {
      "description": "Only compile",
      "name": "compile",
    },
    "default": {
      "description": "Synthesize project files",
      "name": "default",
    },
    "eject": {
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true",
      },
      "name": "eject",
      "steps": [
        {
          "spawn": "default",
        },
      ],
    },
    "package": {
      "description": "Creates the distribution package",
      "name": "package",
    },
    "post-compile": {
      "description": "Runs after successful compilation",
      "name": "post-compile",
    },
    "pre-compile": {
      "description": "Prepare the project for compilation",
      "name": "pre-compile",
    },
    "test": {
      "description": "Run tests",
      "name": "test",
    },
    "tf:foo:apply": {
      "description": "Apply terraform changes",
      "name": "tf:foo:apply",
      "steps": [
        {
          "exec": "cd . && terraform init && terraform apply -auto-approve",
        },
      ],
    },
    "tf:foo:destroy": {
      "description": "Destroy terraform resources",
      "name": "tf:foo:destroy",
      "steps": [
        {
          "exec": "cd . && terraform init && terraform destroy -auto-approve",
        },
      ],
    },
    "tf:foo:init": {
      "description": "Initialize terraform",
      "name": "tf:foo:init",
      "steps": [
        {
          "exec": "cd . && terraform init",
        },
      ],
    },
    "tf:foo:plan": {
      "description": "Run terraform plan",
      "name": "tf:foo:plan",
      "steps": [
        {
          "exec": "cd . && terraform init && terraform plan",
        },
      ],
    },
    "tf:foo:validate": {
      "description": "Validate terraform configuration",
      "name": "tf:foo:validate",
      "steps": [
        {
          "exec": "cd . && terraform validate",
        },
      ],
    },
  },
}
`;

exports[`Gitlab snapshot 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

stages:
  - plan
  - apply
plan:
  extends: []
  needs: []
  stage: plan
  script:
    - export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" $(aws sts assume-role-with-web-identity --role-arn "defaultRole" --role-session-name "GitLabRunner-\${CI_PROJECT_ID}-\${CI_PIPELINE_ID}}" --web-identity-token \${AWS_TOKEN} --duration-seconds 3600 --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' --output text))
    - npx projen tf:plan
  variables: {}
  only:
    refs:
      - main
apply:
  extends: []
  needs: []
  stage: apply
  script:
    - export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" $(aws sts assume-role-with-web-identity --role-arn "defaultRole" --role-session-name "GitLabRunner-\${CI_PROJECT_ID}-\${CI_PIPELINE_ID}}" --web-identity-token \${AWS_TOKEN} --duration-seconds 3600 --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' --output text))
    - npx projen tf:apply
  variables: {}
  only:
    refs:
      - main
"
`;
