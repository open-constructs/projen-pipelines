// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Github snapshot 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: deploy
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  synth:
    name: Synth CDK application
    needs: []
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: synthRole
          role-session-name: GitHubAction
          aws-region: us-east-1
      - run: npx projen install:ci
      - run: npx projen build
      - uses: actions/upload-artifact@v4
        with:
          name: cloud-assembly
          path: cdk.out/
  assetUpload:
    name: Publish assets to AWS
    needs: synth
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup GIT identity
        run: git config --global user.name \\"github-actions\\" && git config --global user.email \\"github-actions@github.com\\"
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: publishRole
          role-session-name: GitHubAction
          aws-region: us-east-1
      - uses: actions/download-artifact@v4
        with:
          name: cloud-assembly
          path: cdk.out/
      - run: npx projen install:ci
      - run: npx projen publish:assets
      - run: npx projen bump
      - run: npx projen release:push-assembly
  deploy-dev:
    name: Deploy stage dev to AWS
    needs: assetUpload
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: devRole
          role-session-name: GitHubAction
          aws-region: eu-central-1
      - uses: actions/download-artifact@v4
        with:
          name: cloud-assembly
          path: cdk.out/
      - run: npx projen install:ci
      - run: npx projen deploy:dev
      - uses: actions/upload-artifact@v3
        with:
          name: cdk-outputs-dev
          path: cdk-outputs-dev.json
"
`;

exports[`Github snapshot 2`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release-prod
on:
  workflow_dispatch:
    inputs:
      version:
        description: Package version
        required: true
jobs:
  deploy:
    name: Release stage prod to AWS
    needs: []
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: prodRole
          role-session-name: GitHubAction
          aws-region: eu-central-1
      - run: npx projen install:ci
      - run: yarn add @assembly/testapp@\${{github.event.inputs.version}}
      - run: mv ./node_modules/@assembly/testapp cdk.out
      - run: npx projen deploy:prod
      - uses: actions/upload-artifact@v3
        with:
          name: cdk-outputs-prod
          path: cdk-outputs-prod.json
"
`;

exports[`Github snapshot 3`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
  "dependencies": Object {
    "aws-cdk-lib": "^2.102.0",
    "constructs": "^10.0.5",
  },
  "devDependencies": Object {
    "@types/jest": "*",
    "@types/node": "^18",
    "@types/standard-version": "*",
    "@typescript-eslint/eslint-plugin": "^6",
    "@typescript-eslint/parser": "^6",
    "aws-cdk": "^2.102.0",
    "cdk-assets": "*",
    "esbuild": "*",
    "eslint": "^8",
    "eslint-import-resolver-typescript": "*",
    "eslint-plugin-import": "*",
    "jest": "*",
    "jest-junit": "^15",
    "projen": "*",
    "standard-version": "*",
    "ts-jest": "*",
    "ts-node": "*",
    "typescript": "*",
  },
  "jest": Object {
    "clearMocks": true,
    "collectCoverage": true,
    "coverageDirectory": "coverage",
    "coveragePathIgnorePatterns": Array [
      "/node_modules/",
    ],
    "coverageReporters": Array [
      "json",
      "lcov",
      "clover",
      "cobertura",
      "text",
    ],
    "reporters": Array [
      "default",
      Array [
        "jest-junit",
        Object {
          "outputDirectory": "test-reports",
        },
      ],
    ],
    "testMatch": Array [
      "<rootDir>/src/**/__tests__/**/*.ts?(x)",
      "<rootDir>/(test|src)/**/*(*.)@(spec|test).ts?(x)",
    ],
    "testPathIgnorePatterns": Array [
      "/node_modules/",
    ],
    "transform": Object {
      "^.+\\\\.[t]sx?$": Array [
        "ts-jest",
        Object {
          "tsconfig": "tsconfig.dev.json",
        },
      ],
    },
    "watchPathIgnorePatterns": Array [
      "/node_modules/",
    ],
  },
  "license": "Apache-2.0",
  "name": "testapp",
  "scripts": Object {
    "build": "npx projen build",
    "bump": "npx projen bump",
    "bundle": "npx projen bundle",
    "clobber": "npx projen clobber",
    "compile": "npx projen compile",
    "default": "npx projen default",
    "deploy:dev": "npx projen deploy:dev",
    "deploy:prod": "npx projen deploy:prod",
    "diff:dev": "npx projen diff:dev",
    "diff:prod": "npx projen diff:prod",
    "eject": "npx projen eject",
    "eslint": "npx projen eslint",
    "package": "npx projen package",
    "post-compile": "npx projen post-compile",
    "post-upgrade": "npx projen post-upgrade",
    "pre-compile": "npx projen pre-compile",
    "projen": "npx projen",
    "publish:assets": "npx projen publish:assets",
    "release:push-assembly": "npx projen release:push-assembly",
    "synth": "npx projen synth",
    "synth:silent": "npx projen synth:silent",
    "test": "npx projen test",
    "test:watch": "npx projen test:watch",
    "upgrade": "npx projen upgrade",
  },
  "version": "0.0.0",
}
`;

exports[`Github snapshot 4`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
  "env": Object {
    "PATH": "$(npx -c \\"node --print process.env.PATH\\")",
  },
  "tasks": Object {
    "build": Object {
      "description": "Full release build",
      "name": "build",
      "steps": Array [
        Object {
          "spawn": "default",
        },
        Object {
          "spawn": "pre-compile",
        },
        Object {
          "spawn": "compile",
        },
        Object {
          "spawn": "post-compile",
        },
        Object {
          "spawn": "test",
        },
        Object {
          "spawn": "package",
        },
      ],
    },
    "bump": Object {
      "description": "Bumps version based on latest git tag",
      "name": "bump",
      "steps": Array [
        Object {
          "exec": "pipelines-release bump",
        },
        Object {
          "exec": "git push --tags",
        },
      ],
    },
    "bundle": Object {
      "description": "Prepare assets",
      "name": "bundle",
    },
    "clobber": Object {
      "condition": "git diff --exit-code > /dev/null",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": Object {
        "BRANCH": "$(git branch --show-current)",
      },
      "name": "clobber",
      "steps": Array [
        Object {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \\"scratch\\" branch",
        },
        Object {
          "exec": "git checkout $BRANCH",
        },
        Object {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin",
        },
        Object {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit",
        },
        Object {
          "exec": "git clean -fdx",
          "name": "clean all untracked files",
        },
        Object {
          "say": "ready to rock! (unpushed commits are under the \\"scratch\\" branch)",
        },
      ],
    },
    "compile": Object {
      "description": "Only compile",
      "name": "compile",
    },
    "default": Object {
      "description": "Synthesize project files",
      "name": "default",
      "steps": Array [
        Object {
          "exec": "node .projenrc.js",
        },
      ],
    },
    "deploy:dev": Object {
      "name": "deploy:dev",
      "steps": Array [
        Object {
          "exec": "cdk --app cdk.out --outputs-file cdk-outputs-dev.json --progress events --require-approval never deploy testapp-dev",
        },
      ],
    },
    "deploy:prod": Object {
      "name": "deploy:prod",
      "steps": Array [
        Object {
          "exec": "cdk --app cdk.out --outputs-file cdk-outputs-prod.json --progress events --require-approval never deploy testapp-prod",
        },
      ],
    },
    "diff:dev": Object {
      "name": "diff:dev",
      "steps": Array [
        Object {
          "exec": "cdk --app cdk.out diff testapp-dev",
        },
      ],
    },
    "diff:prod": Object {
      "name": "diff:prod",
      "steps": Array [
        Object {
          "exec": "cdk --app cdk.out diff testapp-prod",
        },
      ],
    },
    "eject": Object {
      "description": "Remove projen from the project",
      "env": Object {
        "PROJEN_EJECTING": "true",
      },
      "name": "eject",
      "steps": Array [
        Object {
          "spawn": "default",
        },
      ],
    },
    "eslint": Object {
      "description": "Runs eslint against the codebase",
      "name": "eslint",
      "steps": Array [
        Object {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern $@ src test build-tools .projenrc.js",
          "receiveArgs": true,
        },
      ],
    },
    "install": Object {
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "name": "install",
      "steps": Array [
        Object {
          "exec": "yarn install --check-files",
        },
      ],
    },
    "install:ci": Object {
      "description": "Install project dependencies using frozen lockfile",
      "name": "install:ci",
      "steps": Array [
        Object {
          "exec": "yarn install --check-files --frozen-lockfile",
        },
      ],
    },
    "package": Object {
      "description": "Creates the distribution package",
      "name": "package",
    },
    "post-compile": Object {
      "description": "Runs after successful compilation",
      "name": "post-compile",
      "steps": Array [
        Object {
          "spawn": "synth:silent",
        },
      ],
    },
    "post-upgrade": Object {
      "description": "Runs after upgrading dependencies",
      "name": "post-upgrade",
    },
    "pre-compile": Object {
      "description": "Prepare the project for compilation",
      "name": "pre-compile",
    },
    "publish:assets": Object {
      "name": "publish:assets",
      "steps": Array [
        Object {
          "exec": "npx cdk-assets -p cdk.out/testapp-dev.assets.json publish",
        },
        Object {
          "exec": "npx cdk-assets -p cdk.out/testapp-prod.assets.json publish",
        },
      ],
    },
    "release:push-assembly": Object {
      "name": "release:push-assembly",
      "steps": Array [
        Object {
          "exec": "pipelines-release create-manifest \\"cdk.out\\"  \\"@assembly\\"",
        },
        Object {
          "cwd": "cdk.out",
          "exec": "npm version --no-git-tag-version from-git",
        },
        Object {
          "cwd": "cdk.out",
          "exec": "npm publish",
        },
      ],
    },
    "synth": Object {
      "description": "Synthesizes your cdk app into cdk.out",
      "name": "synth",
      "steps": Array [
        Object {
          "exec": "rm -rf cdk.out",
        },
        Object {
          "exec": "cdk synth",
        },
      ],
    },
    "synth:silent": Object {
      "description": "Synthesizes your cdk app into cdk.out and suppresses the template in stdout (part of \\"yarn build\\")",
      "name": "synth:silent",
      "steps": Array [
        Object {
          "exec": "rm -rf cdk.out",
        },
        Object {
          "exec": "cdk synth -q",
        },
      ],
    },
    "test": Object {
      "description": "Run tests",
      "name": "test",
      "steps": Array [
        Object {
          "exec": "jest --passWithNoTests --updateSnapshot",
          "receiveArgs": true,
        },
        Object {
          "spawn": "eslint",
        },
      ],
    },
    "test:watch": Object {
      "description": "Run jest in watch mode",
      "name": "test:watch",
      "steps": Array [
        Object {
          "exec": "jest --watch",
        },
      ],
    },
    "upgrade": Object {
      "description": "upgrade dependencies",
      "env": Object {
        "CI": "0",
      },
      "name": "upgrade",
      "steps": Array [
        Object {
          "exec": "npx npm-check-updates@16 --upgrade --target=minor --peer --dep=dev,peer,prod,optional --filter=@types/jest,@types/standard-version,cdk-assets,esbuild,eslint-import-resolver-typescript,eslint-plugin-import,jest,projen,standard-version,ts-jest,ts-node,typescript",
        },
        Object {
          "exec": "yarn install --check-files",
        },
        Object {
          "exec": "yarn upgrade @types/jest @types/node @types/standard-version @typescript-eslint/eslint-plugin @typescript-eslint/parser aws-cdk cdk-assets esbuild eslint-import-resolver-typescript eslint-plugin-import eslint jest jest-junit projen standard-version ts-jest ts-node typescript aws-cdk-lib constructs",
        },
        Object {
          "exec": "npx projen",
        },
        Object {
          "spawn": "post-upgrade",
        },
      ],
    },
  },
}
`;

exports[`Github snapshot with custom runner 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: deploy
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  synth:
    name: Synth CDK application
    needs: []
    runs-on: custom-runner
    permissions:
      id-token: write
      contents: read
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: synthRole
          role-session-name: GitHubAction
          aws-region: us-east-1
      - run: npx projen install:ci
      - run: npx projen build
      - uses: actions/upload-artifact@v4
        with:
          name: cloud-assembly
          path: cdk.out/
  assetUpload:
    name: Publish assets to AWS
    needs: synth
    runs-on: custom-runner
    permissions:
      id-token: write
      contents: read
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup GIT identity
        run: git config --global user.name \\"github-actions\\" && git config --global user.email \\"github-actions@github.com\\"
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: publishRole
          role-session-name: GitHubAction
          aws-region: us-east-1
      - uses: actions/download-artifact@v4
        with:
          name: cloud-assembly
          path: cdk.out/
      - run: npx projen install:ci
      - run: npx projen publish:assets
"
`;

exports[`Github snapshot with manual approval and GH packages 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: deploy
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  synth:
    name: Synth CDK application
    needs: []
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: read
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: synthRole
          role-session-name: GitHubAction
          aws-region: us-east-1
      - run: echo \\"GITHUB_TOKEN=\${{ secrets.GITHUB_TOKEN }}\\" >> $GITHUB_ENV
      - run: npx projen install:ci
      - run: npx projen build
      - uses: actions/upload-artifact@v4
        with:
          name: cloud-assembly
          path: cdk.out/
  assetUpload:
    name: Publish assets to AWS
    needs: synth
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      packages: write
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup GIT identity
        run: git config --global user.name \\"github-actions\\" && git config --global user.email \\"github-actions@github.com\\"
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: publishRole
          role-session-name: GitHubAction
          aws-region: us-east-1
      - uses: actions/download-artifact@v4
        with:
          name: cloud-assembly
          path: cdk.out/
      - run: echo \\"GITHUB_TOKEN=\${{ secrets.GITHUB_TOKEN }}\\" >> $GITHUB_ENV
      - run: npx projen install:ci
      - run: npx projen publish:assets
      - run: npx projen bump
      - run: npx projen release:push-assembly
"
`;

exports[`Github snapshot with manual approval and GH packages 2`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release-prod
on:
  workflow_dispatch:
    inputs:
      version:
        description: Package version
        required: true
jobs:
  deploy:
    name: Release stage prod to AWS
    needs: []
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: read
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-session-name: GitHubAction
          aws-region: eu-central-1
      - run: echo \\"GITHUB_TOKEN=\${{ secrets.GITHUB_TOKEN }}\\" >> $GITHUB_ENV
      - run: npx projen install:ci
      - run: yarn add @assembly/testapp@\${{github.event.inputs.version}}
      - run: mv ./node_modules/@assembly/testapp cdk.out
      - run: npx projen deploy:prod
      - uses: actions/upload-artifact@v3
        with:
          name: cdk-outputs-prod
          path: cdk-outputs-prod.json
"
`;

exports[`Github snapshot with multi stack 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: deploy
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  synth:
    name: Synth CDK application
    needs: []
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: synthRole
          role-session-name: GitHubAction
          aws-region: us-east-1
      - run: npx projen install:ci
      - run: npx projen build
      - uses: actions/upload-artifact@v4
        with:
          name: cloud-assembly
          path: cdk.out/
  assetUpload:
    name: Publish assets to AWS
    needs: synth
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup GIT identity
        run: git config --global user.name \\"github-actions\\" && git config --global user.email \\"github-actions@github.com\\"
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: publishRole
          role-session-name: GitHubAction
          aws-region: us-east-1
      - uses: actions/download-artifact@v4
        with:
          name: cloud-assembly
          path: cdk.out/
      - run: npx projen install:ci
      - run: npx projen publish:assets
  deploy-dev:
    name: Deploy stage dev to AWS
    needs: assetUpload
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      CI: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: devRole
          role-session-name: GitHubAction
          aws-region: eu-central-1
      - uses: actions/download-artifact@v4
        with:
          name: cloud-assembly
          path: cdk.out/
      - run: npx projen install:ci
      - run: npx projen deploy:dev
      - uses: actions/upload-artifact@v3
        with:
          name: cdk-outputs-dev
          path: cdk-outputs-dev.json
"
`;

exports[`Github snapshot with multi stack 2`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
  "env": Object {
    "PATH": "$(npx -c \\"node --print process.env.PATH\\")",
  },
  "tasks": Object {
    "build": Object {
      "description": "Full release build",
      "name": "build",
      "steps": Array [
        Object {
          "spawn": "default",
        },
        Object {
          "spawn": "pre-compile",
        },
        Object {
          "spawn": "compile",
        },
        Object {
          "spawn": "post-compile",
        },
        Object {
          "spawn": "test",
        },
        Object {
          "spawn": "package",
        },
      ],
    },
    "bump": Object {
      "description": "Bumps version based on latest git tag",
      "name": "bump",
      "steps": Array [
        Object {
          "exec": "pipelines-release bump",
        },
        Object {
          "exec": "git push --tags",
        },
      ],
    },
    "bundle": Object {
      "description": "Prepare assets",
      "name": "bundle",
    },
    "clobber": Object {
      "condition": "git diff --exit-code > /dev/null",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": Object {
        "BRANCH": "$(git branch --show-current)",
      },
      "name": "clobber",
      "steps": Array [
        Object {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \\"scratch\\" branch",
        },
        Object {
          "exec": "git checkout $BRANCH",
        },
        Object {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin",
        },
        Object {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit",
        },
        Object {
          "exec": "git clean -fdx",
          "name": "clean all untracked files",
        },
        Object {
          "say": "ready to rock! (unpushed commits are under the \\"scratch\\" branch)",
        },
      ],
    },
    "compile": Object {
      "description": "Only compile",
      "name": "compile",
    },
    "default": Object {
      "description": "Synthesize project files",
      "name": "default",
      "steps": Array [
        Object {
          "exec": "node .projenrc.js",
        },
      ],
    },
    "deploy:dev": Object {
      "name": "deploy:dev",
      "steps": Array [
        Object {
          "exec": "cdk --app cdk.out --outputs-file cdk-outputs-dev.json --progress events --require-approval never deploy testapp-dev testapp-dev/*",
        },
      ],
    },
    "diff:dev": Object {
      "name": "diff:dev",
      "steps": Array [
        Object {
          "exec": "cdk --app cdk.out diff testapp-dev testapp-dev/*",
        },
      ],
    },
    "eject": Object {
      "description": "Remove projen from the project",
      "env": Object {
        "PROJEN_EJECTING": "true",
      },
      "name": "eject",
      "steps": Array [
        Object {
          "spawn": "default",
        },
      ],
    },
    "eslint": Object {
      "description": "Runs eslint against the codebase",
      "name": "eslint",
      "steps": Array [
        Object {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern $@ src test build-tools .projenrc.js",
          "receiveArgs": true,
        },
      ],
    },
    "install": Object {
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "name": "install",
      "steps": Array [
        Object {
          "exec": "yarn install --check-files",
        },
      ],
    },
    "install:ci": Object {
      "description": "Install project dependencies using frozen lockfile",
      "name": "install:ci",
      "steps": Array [
        Object {
          "exec": "yarn install --check-files --frozen-lockfile",
        },
      ],
    },
    "package": Object {
      "description": "Creates the distribution package",
      "name": "package",
    },
    "post-compile": Object {
      "description": "Runs after successful compilation",
      "name": "post-compile",
      "steps": Array [
        Object {
          "spawn": "synth:silent",
        },
      ],
    },
    "post-upgrade": Object {
      "description": "Runs after upgrading dependencies",
      "name": "post-upgrade",
    },
    "pre-compile": Object {
      "description": "Prepare the project for compilation",
      "name": "pre-compile",
    },
    "publish:assets": Object {
      "name": "publish:assets",
      "steps": Array [
        Object {
          "exec": "npx cdk-assets -p cdk.out/testapp-dev.assets.json publish",
        },
      ],
    },
    "release:push-assembly": Object {
      "name": "release:push-assembly",
      "steps": Array [
        Object {
          "exec": "pipelines-release create-manifest \\"cdk.out\\"  \\"@assembly\\"",
        },
        Object {
          "cwd": "cdk.out",
          "exec": "npm version --no-git-tag-version from-git",
        },
        Object {
          "cwd": "cdk.out",
          "exec": "npm publish",
        },
      ],
    },
    "synth": Object {
      "description": "Synthesizes your cdk app into cdk.out",
      "name": "synth",
      "steps": Array [
        Object {
          "exec": "rm -rf cdk.out",
        },
        Object {
          "exec": "cdk synth",
        },
      ],
    },
    "synth:silent": Object {
      "description": "Synthesizes your cdk app into cdk.out and suppresses the template in stdout (part of \\"yarn build\\")",
      "name": "synth:silent",
      "steps": Array [
        Object {
          "exec": "rm -rf cdk.out",
        },
        Object {
          "exec": "cdk synth -q",
        },
      ],
    },
    "test": Object {
      "description": "Run tests",
      "name": "test",
      "steps": Array [
        Object {
          "exec": "jest --passWithNoTests --updateSnapshot",
          "receiveArgs": true,
        },
        Object {
          "spawn": "eslint",
        },
      ],
    },
    "test:watch": Object {
      "description": "Run jest in watch mode",
      "name": "test:watch",
      "steps": Array [
        Object {
          "exec": "jest --watch",
        },
      ],
    },
    "upgrade": Object {
      "description": "upgrade dependencies",
      "env": Object {
        "CI": "0",
      },
      "name": "upgrade",
      "steps": Array [
        Object {
          "exec": "npx npm-check-updates@16 --upgrade --target=minor --peer --dep=dev,peer,prod,optional --filter=@types/jest,@types/standard-version,cdk-assets,esbuild,eslint-import-resolver-typescript,eslint-plugin-import,jest,projen,standard-version,ts-jest,ts-node,typescript",
        },
        Object {
          "exec": "yarn install --check-files",
        },
        Object {
          "exec": "yarn upgrade @types/jest @types/node @types/standard-version @typescript-eslint/eslint-plugin @typescript-eslint/parser aws-cdk cdk-assets esbuild eslint-import-resolver-typescript eslint-plugin-import eslint jest jest-junit projen standard-version ts-jest ts-node typescript aws-cdk-lib constructs",
        },
        Object {
          "exec": "npx projen",
        },
        Object {
          "spawn": "post-upgrade",
        },
      ],
    },
  },
}
`;
